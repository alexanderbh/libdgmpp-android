/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "dgmpp.h"
using namespace std;


#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <string>

SWIGINTERN std::vector< int >::const_reference std_vector_Sl_dgmpp_TypeID_Sg__get(std::vector< dgmpp::TypeID > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_dgmpp_TypeID_Sg__set(std::vector< dgmpp::TypeID > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::shared_ptr< dgmpp::Attribute > const &std_map_Sl_dgmpp_TypeID_Sc_std_shared_ptr_Sl_dgmpp_Attribute_Sg__Sg__get(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *self,int const &key){
                std::map<int,std::shared_ptr< dgmpp::Attribute > >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_dgmpp_TypeID_Sc_std_shared_ptr_Sl_dgmpp_Attribute_Sg__Sg__set(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *self,int const &key,std::shared_ptr< dgmpp::Attribute > const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_dgmpp_TypeID_Sc_std_shared_ptr_Sl_dgmpp_Attribute_Sg__Sg__del(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *self,int const &key){
                std::map<int,std::shared_ptr< dgmpp::Attribute > >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_dgmpp_TypeID_Sc_std_shared_ptr_Sl_dgmpp_Attribute_Sg__Sg__has_key(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *self,int const &key){
                std::map<int,std::shared_ptr< dgmpp::Attribute > >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< std::shared_ptr< dgmpp::Module > >::const_reference std_vector_Sl_std_shared_ptr_Sl_dgmpp_Module_Sg__Sg__get(std::vector< std::shared_ptr< dgmpp::Module > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dgmpp_Module_Sg__Sg__set(std::vector< std::shared_ptr< dgmpp::Module > > *self,int i,std::vector< std::shared_ptr< dgmpp::Module > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< dgmpp::Drone > >::const_reference std_vector_Sl_std_shared_ptr_Sl_dgmpp_Drone_Sg__Sg__get(std::vector< std::shared_ptr< dgmpp::Drone > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dgmpp_Drone_Sg__Sg__set(std::vector< std::shared_ptr< dgmpp::Drone > > *self,int i,std::vector< std::shared_ptr< dgmpp::Drone > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< dgmpp::Character > >::const_reference std_vector_Sl_std_shared_ptr_Sl_dgmpp_Character_Sg__Sg__get(std::vector< std::shared_ptr< dgmpp::Character > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dgmpp_Character_Sg__Sg__set(std::vector< std::shared_ptr< dgmpp::Character > > *self,int i,std::vector< std::shared_ptr< dgmpp::Character > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::shared_ptr< dgmpp::Skill > const &std_map_Sl_dgmpp_TypeID_Sc_std_shared_ptr_Sl_dgmpp_Skill_Sg__Sg__get(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *self,int const &key){
                std::map<int,std::shared_ptr< dgmpp::Skill > >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_dgmpp_TypeID_Sc_std_shared_ptr_Sl_dgmpp_Skill_Sg__Sg__set(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *self,int const &key,std::shared_ptr< dgmpp::Skill > const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_dgmpp_TypeID_Sc_std_shared_ptr_Sl_dgmpp_Skill_Sg__Sg__del(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *self,int const &key){
                std::map<int,std::shared_ptr< dgmpp::Skill > >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_dgmpp_TypeID_Sc_std_shared_ptr_Sl_dgmpp_Skill_Sg__Sg__has_key(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *self,int const &key){
                std::map<int,std::shared_ptr< dgmpp::Skill > >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< std::shared_ptr< dgmpp::Implant > >::const_reference std_vector_Sl_std_shared_ptr_Sl_dgmpp_Implant_Sg__Sg__get(std::vector< std::shared_ptr< dgmpp::Implant > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dgmpp_Implant_Sg__Sg__set(std::vector< std::shared_ptr< dgmpp::Implant > > *self,int i,std::vector< std::shared_ptr< dgmpp::Implant > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< dgmpp::Booster > >::const_reference std_vector_Sl_std_shared_ptr_Sl_dgmpp_Booster_Sg__Sg__get(std::vector< std::shared_ptr< dgmpp::Booster > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dgmpp_Booster_Sg__Sg__set(std::vector< std::shared_ptr< dgmpp::Booster > > *self,int i,std::vector< std::shared_ptr< dgmpp::Booster > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< dgmpp::StarbaseStructure > >::const_reference std_vector_Sl_std_shared_ptr_Sl_dgmpp_StarbaseStructure_Sg__Sg__get(std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dgmpp_StarbaseStructure_Sg__Sg__set(std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *self,int i,std::vector< std::shared_ptr< dgmpp::StarbaseStructure > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< dgmpp::Cargo > >::const_reference std_vector_Sl_std_shared_ptr_Sl_dgmpp_Cargo_Sg__Sg__get(std::vector< std::shared_ptr< dgmpp::Cargo > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dgmpp_Cargo_Sg__Sg__set(std::vector< std::shared_ptr< dgmpp::Cargo > > *self,int i,std::vector< std::shared_ptr< dgmpp::Cargo > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN float dgmpp_DamageVector_total(dgmpp::DamageVector *self){
				return (float)*self;
			}
SWIGINTERN void dgmpp_Module_setState(dgmpp::Module *self,dgmpp::Module::State state){
				self->setPreferredState(state);
			}
SWIGINTERN std::vector< std::shared_ptr< dgmpp::Module > > dgmpp_Ship_getModules(dgmpp::Ship *self){
				const dgmpp::ModulesList& modules = self->getModules();
				return std::vector<std::shared_ptr<dgmpp::Module>>(modules.begin(), modules.end());
			}
SWIGINTERN std::vector< std::shared_ptr< dgmpp::Drone > > dgmpp_Ship_getDrones(dgmpp::Ship *self){
				const dgmpp::DronesList& drones = self->getDrones();
				return std::vector<std::shared_ptr<dgmpp::Drone>>(drones.begin(), drones.end());
			}
SWIGINTERN std::vector< std::shared_ptr< dgmpp::Module > > dgmpp_Ship_getProjectedModules(dgmpp::Ship *self){
				std::vector<std::shared_ptr<dgmpp::Module>> modules;
				for (auto module: self->getProjectedModules())
					modules.push_back(module.lock());
				return modules;
			}
SWIGINTERN std::vector< std::shared_ptr< dgmpp::Drone > > dgmpp_Ship_getProjectedDrones(dgmpp::Ship *self){
				std::vector<std::shared_ptr<dgmpp::Drone>> drones;
				for (auto drone: self->getProjectedDrones())
					drones.push_back(drone.lock());
				return drones;
			}
SWIGINTERN int const &std_map_Sl_dgmpp_TypeID_Sc_int_Sg__get(std::map< dgmpp::TypeID,int > *self,int const &key){
                std::map<int,int >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_dgmpp_TypeID_Sc_int_Sg__set(std::map< dgmpp::TypeID,int > *self,int const &key,int const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_dgmpp_TypeID_Sc_int_Sg__del(std::map< dgmpp::TypeID,int > *self,int const &key){
                std::map<int,int >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_dgmpp_TypeID_Sc_int_Sg__has_key(std::map< dgmpp::TypeID,int > *self,int const &key){
                std::map<int,int >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< std::shared_ptr< dgmpp::Implant > > dgmpp_Character_getImplants(dgmpp::Character *self){
				const dgmpp::ImplantsList& implants = self->getImplants();
				return std::vector<std::shared_ptr<dgmpp::Implant>>(implants.begin(), implants.end());
			}
SWIGINTERN std::vector< std::shared_ptr< dgmpp::Booster > > dgmpp_Character_getBoosters(dgmpp::Character *self){
				const dgmpp::BoostersList& boosters = self->getBoosters();
				return std::vector<std::shared_ptr<dgmpp::Booster>>(boosters.begin(), boosters.end());
			}
SWIGINTERN std::vector< std::shared_ptr< dgmpp::Character > > dgmpp_Gang_getPilots(dgmpp::Gang *self){
				const dgmpp::CharactersList& pilots = self->getPilots();
				return std::vector<std::shared_ptr<dgmpp::Character>>(pilots.begin(), pilots.end());
			}
SWIGINTERN std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > dgmpp_ControlTower_getStructures(dgmpp::ControlTower *self){
				const dgmpp::StarbaseStructuresList& structures = self->getStructures();
				return std::vector<std::shared_ptr<dgmpp::StarbaseStructure>>(structures.begin(), structures.end());
			}

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1TypesList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< dgmpp::TypeID > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< dgmpp::TypeID > *)new std::vector< dgmpp::TypeID >();
  *(std::vector< dgmpp::TypeID > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1TypesList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< dgmpp::TypeID > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  result = (std::vector< dgmpp::TypeID > *)new std::vector< dgmpp::TypeID >(arg1);
  *(std::vector< dgmpp::TypeID > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_TypesList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::TypeID > *arg1 = (std::vector< dgmpp::TypeID > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::TypeID > **)&jarg1; 
  result = ((std::vector< dgmpp::TypeID > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_TypesList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::TypeID > *arg1 = (std::vector< dgmpp::TypeID > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::TypeID > **)&jarg1; 
  result = ((std::vector< dgmpp::TypeID > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_TypesList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< dgmpp::TypeID > *arg1 = (std::vector< dgmpp::TypeID > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::TypeID > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_TypesList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< dgmpp::TypeID > *arg1 = (std::vector< dgmpp::TypeID > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::TypeID > **)&jarg1; 
  result = (bool)((std::vector< dgmpp::TypeID > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_TypesList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< dgmpp::TypeID > *arg1 = (std::vector< dgmpp::TypeID > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::TypeID > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_TypesList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< dgmpp::TypeID > *arg1 = (std::vector< dgmpp::TypeID > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::TypeID > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_TypesList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< dgmpp::TypeID > *arg1 = (std::vector< dgmpp::TypeID > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::TypeID > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_dgmpp_TypeID_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_TypesList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< dgmpp::TypeID > *arg1 = (std::vector< dgmpp::TypeID > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::TypeID > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_dgmpp_TypeID_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1TypesList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< dgmpp::TypeID > *arg1 = (std::vector< dgmpp::TypeID > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< dgmpp::TypeID > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1AttributesMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *)new std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > >();
  *(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1AttributesMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,std::shared_ptr< dgmpp::Attribute > > *arg1 = 0 ;
  std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,std::shared_ptr< dgmpp::Attribute > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,std::shared_ptr< dgmpp::Attribute > > const & reference is null");
    return 0;
  } 
  result = (std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *)new std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > >((std::map< int,std::shared_ptr< dgmpp::Attribute > > const &)*arg1);
  *(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_AttributesMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *arg1 = (std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > **)&jarg1; 
  result = (unsigned int)((std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_AttributesMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *arg1 = (std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > **)&jarg1; 
  result = (bool)((std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_AttributesMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *arg1 = (std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_AttributesMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *arg1 = (std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  std::shared_ptr< dgmpp::Attribute > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::shared_ptr< dgmpp::Attribute > *) &std_map_Sl_dgmpp_TypeID_Sc_std_shared_ptr_Sl_dgmpp_Attribute_Sg__Sg__get(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::shared_ptr< dgmpp::Attribute > **)&jresult = *result ? new std::shared_ptr< dgmpp::Attribute >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_AttributesMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *arg1 = (std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *) 0 ;
  int *arg2 = 0 ;
  std::shared_ptr< dgmpp::Attribute > *arg3 = 0 ;
  int temp2 ;
  std::shared_ptr< dgmpp::Attribute > tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = jarg3 ? *(std::shared_ptr< dgmpp::Attribute > **)&jarg3 : &tempnull3; 
  std_map_Sl_dgmpp_TypeID_Sc_std_shared_ptr_Sl_dgmpp_Attribute_Sg__Sg__set(arg1,(int const &)*arg2,(std::shared_ptr< dgmpp::Attribute > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_AttributesMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *arg1 = (std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    std_map_Sl_dgmpp_TypeID_Sc_std_shared_ptr_Sl_dgmpp_Attribute_Sg__Sg__del(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_AttributesMap_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *arg1 = (std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_dgmpp_TypeID_Sc_std_shared_ptr_Sl_dgmpp_Attribute_Sg__Sg__has_key(arg1,(int const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1AttributesMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *arg1 = (std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Attribute > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1ModulesList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Module > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< dgmpp::Module > > *)new std::vector< std::shared_ptr< dgmpp::Module > >();
  *(std::vector< std::shared_ptr< dgmpp::Module > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1ModulesList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Module > >::size_type arg1 ;
  std::vector< std::shared_ptr< dgmpp::Module > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< dgmpp::Module > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< dgmpp::Module > > *)new std::vector< std::shared_ptr< dgmpp::Module > >(arg1);
  *(std::vector< std::shared_ptr< dgmpp::Module > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_ModulesList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Module > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Module > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Module > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Module > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< dgmpp::Module > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_ModulesList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Module > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Module > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Module > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Module > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< dgmpp::Module > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_ModulesList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< dgmpp::Module > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Module > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Module > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Module > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< dgmpp::Module > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_ModulesList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Module > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Module > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Module > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< dgmpp::Module > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_ModulesList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< dgmpp::Module > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Module > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Module > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_ModulesList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< dgmpp::Module > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Module > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Module > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< dgmpp::Module > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Module > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< dgmpp::Module > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< dgmpp::Module > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_ModulesList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Module > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Module > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< dgmpp::Module > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Module > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< dgmpp::Module > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_dgmpp_Module_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< dgmpp::Module > >::value_type **)&jresult = *result ? new std::shared_ptr< dgmpp::Module >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_ModulesList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< dgmpp::Module > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Module > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< dgmpp::Module > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< dgmpp::Module > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Module > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< dgmpp::Module > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_dgmpp_Module_Sg__Sg__set(arg1,arg2,(std::shared_ptr< dgmpp::Module > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1ModulesList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< dgmpp::Module > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Module > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Module > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1DronesList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Drone > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< dgmpp::Drone > > *)new std::vector< std::shared_ptr< dgmpp::Drone > >();
  *(std::vector< std::shared_ptr< dgmpp::Drone > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1DronesList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Drone > >::size_type arg1 ;
  std::vector< std::shared_ptr< dgmpp::Drone > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< dgmpp::Drone > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< dgmpp::Drone > > *)new std::vector< std::shared_ptr< dgmpp::Drone > >(arg1);
  *(std::vector< std::shared_ptr< dgmpp::Drone > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_DronesList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Drone > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Drone > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Drone > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Drone > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< dgmpp::Drone > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_DronesList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Drone > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Drone > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Drone > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Drone > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< dgmpp::Drone > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_DronesList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< dgmpp::Drone > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Drone > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Drone > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Drone > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< dgmpp::Drone > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_DronesList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Drone > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Drone > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Drone > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< dgmpp::Drone > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_DronesList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< dgmpp::Drone > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Drone > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Drone > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_DronesList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< dgmpp::Drone > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Drone > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Drone > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< dgmpp::Drone > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Drone > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< dgmpp::Drone > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< dgmpp::Drone > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_DronesList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Drone > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Drone > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< dgmpp::Drone > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Drone > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< dgmpp::Drone > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_dgmpp_Drone_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< dgmpp::Drone > >::value_type **)&jresult = *result ? new std::shared_ptr< dgmpp::Drone >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_DronesList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< dgmpp::Drone > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Drone > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< dgmpp::Drone > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< dgmpp::Drone > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Drone > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< dgmpp::Drone > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_dgmpp_Drone_Sg__Sg__set(arg1,arg2,(std::shared_ptr< dgmpp::Drone > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1DronesList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< dgmpp::Drone > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Drone > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Drone > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1CharactersList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Character > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< dgmpp::Character > > *)new std::vector< std::shared_ptr< dgmpp::Character > >();
  *(std::vector< std::shared_ptr< dgmpp::Character > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1CharactersList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Character > >::size_type arg1 ;
  std::vector< std::shared_ptr< dgmpp::Character > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< dgmpp::Character > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< dgmpp::Character > > *)new std::vector< std::shared_ptr< dgmpp::Character > >(arg1);
  *(std::vector< std::shared_ptr< dgmpp::Character > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_CharactersList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Character > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Character > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Character > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Character > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< dgmpp::Character > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_CharactersList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Character > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Character > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Character > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Character > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< dgmpp::Character > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_CharactersList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< dgmpp::Character > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Character > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Character > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Character > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< dgmpp::Character > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_CharactersList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Character > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Character > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Character > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< dgmpp::Character > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_CharactersList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< dgmpp::Character > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Character > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Character > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_CharactersList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< dgmpp::Character > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Character > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Character > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< dgmpp::Character > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Character > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< dgmpp::Character > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< dgmpp::Character > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_CharactersList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Character > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Character > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< dgmpp::Character > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Character > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< dgmpp::Character > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_dgmpp_Character_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< dgmpp::Character > >::value_type **)&jresult = *result ? new std::shared_ptr< dgmpp::Character >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_CharactersList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< dgmpp::Character > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Character > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< dgmpp::Character > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< dgmpp::Character > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Character > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< dgmpp::Character > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_dgmpp_Character_Sg__Sg__set(arg1,arg2,(std::shared_ptr< dgmpp::Character > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1CharactersList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< dgmpp::Character > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Character > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Character > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1SkillsMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *)new std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > >();
  *(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1SkillsMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,std::shared_ptr< dgmpp::Skill > > *arg1 = 0 ;
  std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,std::shared_ptr< dgmpp::Skill > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,std::shared_ptr< dgmpp::Skill > > const & reference is null");
    return 0;
  } 
  result = (std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *)new std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > >((std::map< int,std::shared_ptr< dgmpp::Skill > > const &)*arg1);
  *(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_SkillsMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *arg1 = (std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > **)&jarg1; 
  result = (unsigned int)((std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_SkillsMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *arg1 = (std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > **)&jarg1; 
  result = (bool)((std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_SkillsMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *arg1 = (std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_SkillsMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *arg1 = (std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  std::shared_ptr< dgmpp::Skill > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::shared_ptr< dgmpp::Skill > *) &std_map_Sl_dgmpp_TypeID_Sc_std_shared_ptr_Sl_dgmpp_Skill_Sg__Sg__get(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::shared_ptr< dgmpp::Skill > **)&jresult = *result ? new std::shared_ptr< dgmpp::Skill >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_SkillsMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *arg1 = (std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *) 0 ;
  int *arg2 = 0 ;
  std::shared_ptr< dgmpp::Skill > *arg3 = 0 ;
  int temp2 ;
  std::shared_ptr< dgmpp::Skill > tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = jarg3 ? *(std::shared_ptr< dgmpp::Skill > **)&jarg3 : &tempnull3; 
  std_map_Sl_dgmpp_TypeID_Sc_std_shared_ptr_Sl_dgmpp_Skill_Sg__Sg__set(arg1,(int const &)*arg2,(std::shared_ptr< dgmpp::Skill > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_SkillsMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *arg1 = (std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    std_map_Sl_dgmpp_TypeID_Sc_std_shared_ptr_Sl_dgmpp_Skill_Sg__Sg__del(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_SkillsMap_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *arg1 = (std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_dgmpp_TypeID_Sc_std_shared_ptr_Sl_dgmpp_Skill_Sg__Sg__has_key(arg1,(int const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1SkillsMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *arg1 = (std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< dgmpp::TypeID,std::shared_ptr< dgmpp::Skill > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1ImplantsList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Implant > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< dgmpp::Implant > > *)new std::vector< std::shared_ptr< dgmpp::Implant > >();
  *(std::vector< std::shared_ptr< dgmpp::Implant > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1ImplantsList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Implant > >::size_type arg1 ;
  std::vector< std::shared_ptr< dgmpp::Implant > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< dgmpp::Implant > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< dgmpp::Implant > > *)new std::vector< std::shared_ptr< dgmpp::Implant > >(arg1);
  *(std::vector< std::shared_ptr< dgmpp::Implant > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_ImplantsList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Implant > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Implant > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Implant > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Implant > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< dgmpp::Implant > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_ImplantsList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Implant > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Implant > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Implant > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Implant > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< dgmpp::Implant > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_ImplantsList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< dgmpp::Implant > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Implant > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Implant > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Implant > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< dgmpp::Implant > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_ImplantsList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Implant > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Implant > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Implant > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< dgmpp::Implant > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_ImplantsList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< dgmpp::Implant > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Implant > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Implant > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_ImplantsList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< dgmpp::Implant > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Implant > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Implant > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< dgmpp::Implant > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Implant > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< dgmpp::Implant > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< dgmpp::Implant > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_ImplantsList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Implant > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Implant > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< dgmpp::Implant > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Implant > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< dgmpp::Implant > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_dgmpp_Implant_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< dgmpp::Implant > >::value_type **)&jresult = *result ? new std::shared_ptr< dgmpp::Implant >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_ImplantsList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< dgmpp::Implant > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Implant > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< dgmpp::Implant > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< dgmpp::Implant > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Implant > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< dgmpp::Implant > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_dgmpp_Implant_Sg__Sg__set(arg1,arg2,(std::shared_ptr< dgmpp::Implant > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1ImplantsList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< dgmpp::Implant > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Implant > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Implant > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1BoostersList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Booster > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< dgmpp::Booster > > *)new std::vector< std::shared_ptr< dgmpp::Booster > >();
  *(std::vector< std::shared_ptr< dgmpp::Booster > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1BoostersList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Booster > >::size_type arg1 ;
  std::vector< std::shared_ptr< dgmpp::Booster > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< dgmpp::Booster > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< dgmpp::Booster > > *)new std::vector< std::shared_ptr< dgmpp::Booster > >(arg1);
  *(std::vector< std::shared_ptr< dgmpp::Booster > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_BoostersList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Booster > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Booster > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Booster > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Booster > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< dgmpp::Booster > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_BoostersList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Booster > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Booster > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Booster > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Booster > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< dgmpp::Booster > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_BoostersList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< dgmpp::Booster > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Booster > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Booster > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Booster > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< dgmpp::Booster > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_BoostersList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Booster > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Booster > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Booster > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< dgmpp::Booster > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_BoostersList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< dgmpp::Booster > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Booster > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Booster > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_BoostersList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< dgmpp::Booster > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Booster > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Booster > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< dgmpp::Booster > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Booster > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< dgmpp::Booster > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< dgmpp::Booster > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_BoostersList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Booster > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Booster > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< dgmpp::Booster > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Booster > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< dgmpp::Booster > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_dgmpp_Booster_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< dgmpp::Booster > >::value_type **)&jresult = *result ? new std::shared_ptr< dgmpp::Booster >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_BoostersList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< dgmpp::Booster > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Booster > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< dgmpp::Booster > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< dgmpp::Booster > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Booster > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< dgmpp::Booster > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_dgmpp_Booster_Sg__Sg__set(arg1,arg2,(std::shared_ptr< dgmpp::Booster > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1BoostersList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< dgmpp::Booster > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Booster > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Booster > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1StarbaseStructuresList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *)new std::vector< std::shared_ptr< dgmpp::StarbaseStructure > >();
  *(std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1StarbaseStructuresList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::StarbaseStructure > >::size_type arg1 ;
  std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< dgmpp::StarbaseStructure > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *)new std::vector< std::shared_ptr< dgmpp::StarbaseStructure > >(arg1);
  *(std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_StarbaseStructuresList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *arg1 = (std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::StarbaseStructure > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_StarbaseStructuresList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *arg1 = (std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::StarbaseStructure > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_StarbaseStructuresList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *arg1 = (std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::StarbaseStructure > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< dgmpp::StarbaseStructure > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_StarbaseStructuresList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *arg1 = (std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_StarbaseStructuresList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *arg1 = (std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_StarbaseStructuresList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *arg1 = (std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::StarbaseStructure > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< dgmpp::StarbaseStructure > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< dgmpp::StarbaseStructure > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< dgmpp::StarbaseStructure > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_StarbaseStructuresList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *arg1 = (std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< dgmpp::StarbaseStructure > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< dgmpp::StarbaseStructure > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_dgmpp_StarbaseStructure_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< dgmpp::StarbaseStructure > >::value_type **)&jresult = *result ? new std::shared_ptr< dgmpp::StarbaseStructure >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_StarbaseStructuresList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *arg1 = (std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< dgmpp::StarbaseStructure > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< dgmpp::StarbaseStructure > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< dgmpp::StarbaseStructure > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_dgmpp_StarbaseStructure_Sg__Sg__set(arg1,arg2,(std::shared_ptr< dgmpp::StarbaseStructure > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1StarbaseStructuresList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *arg1 = (std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1CargoList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Cargo > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< dgmpp::Cargo > > *)new std::vector< std::shared_ptr< dgmpp::Cargo > >();
  *(std::vector< std::shared_ptr< dgmpp::Cargo > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1CargoList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Cargo > >::size_type arg1 ;
  std::vector< std::shared_ptr< dgmpp::Cargo > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< dgmpp::Cargo > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< dgmpp::Cargo > > *)new std::vector< std::shared_ptr< dgmpp::Cargo > >(arg1);
  *(std::vector< std::shared_ptr< dgmpp::Cargo > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_CargoList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Cargo > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Cargo > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Cargo > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Cargo > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< dgmpp::Cargo > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_CargoList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Cargo > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Cargo > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Cargo > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Cargo > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< dgmpp::Cargo > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_CargoList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< dgmpp::Cargo > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Cargo > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Cargo > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Cargo > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< dgmpp::Cargo > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_CargoList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Cargo > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Cargo > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Cargo > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< dgmpp::Cargo > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_CargoList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< dgmpp::Cargo > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Cargo > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Cargo > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_CargoList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< dgmpp::Cargo > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Cargo > > *) 0 ;
  std::vector< std::shared_ptr< dgmpp::Cargo > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< dgmpp::Cargo > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Cargo > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< dgmpp::Cargo > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< dgmpp::Cargo > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_CargoList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< dgmpp::Cargo > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Cargo > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< dgmpp::Cargo > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Cargo > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< dgmpp::Cargo > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_dgmpp_Cargo_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< dgmpp::Cargo > >::value_type **)&jresult = *result ? new std::shared_ptr< dgmpp::Cargo >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_CargoList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< dgmpp::Cargo > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Cargo > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< dgmpp::Cargo > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< dgmpp::Cargo > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Cargo > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< dgmpp::Cargo > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_dgmpp_Cargo_Sg__Sg__set(arg1,arg2,(std::shared_ptr< dgmpp::Cargo > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1CargoList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< dgmpp::Cargo > > *arg1 = (std::vector< std::shared_ptr< dgmpp::Cargo > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< dgmpp::Cargo > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Tank_1armorRepair_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dgmpp::Tank *arg1 = (dgmpp::Tank *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Tank **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->armorRepair = arg2;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Tank_1armorRepair_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Tank *arg1 = (dgmpp::Tank *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Tank **)&jarg1; 
  result = (float) ((arg1)->armorRepair);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Tank_1hullRepair_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dgmpp::Tank *arg1 = (dgmpp::Tank *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Tank **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->hullRepair = arg2;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Tank_1hullRepair_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Tank *arg1 = (dgmpp::Tank *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Tank **)&jarg1; 
  result = (float) ((arg1)->hullRepair);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Tank_1shieldRepair_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dgmpp::Tank *arg1 = (dgmpp::Tank *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Tank **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->shieldRepair = arg2;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Tank_1shieldRepair_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Tank *arg1 = (dgmpp::Tank *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Tank **)&jarg1; 
  result = (float) ((arg1)->shieldRepair);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Tank_1passiveShield_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dgmpp::Tank *arg1 = (dgmpp::Tank *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Tank **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->passiveShield = arg2;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Tank_1passiveShield_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Tank *arg1 = (dgmpp::Tank *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Tank **)&jarg1; 
  result = (float) ((arg1)->passiveShield);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1Tank(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dgmpp::Tank *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::Tank *)new dgmpp::Tank();
  *(dgmpp::Tank **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1Tank(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Tank *arg1 = (dgmpp::Tank *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::Tank **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_HitPoints_1armor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dgmpp::HitPoints *arg1 = (dgmpp::HitPoints *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::HitPoints **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->armor = arg2;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_HitPoints_1armor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::HitPoints *arg1 = (dgmpp::HitPoints *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::HitPoints **)&jarg1; 
  result = (float) ((arg1)->armor);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_HitPoints_1hull_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dgmpp::HitPoints *arg1 = (dgmpp::HitPoints *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::HitPoints **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->hull = arg2;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_HitPoints_1hull_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::HitPoints *arg1 = (dgmpp::HitPoints *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::HitPoints **)&jarg1; 
  result = (float) ((arg1)->hull);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_HitPoints_1shield_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dgmpp::HitPoints *arg1 = (dgmpp::HitPoints *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::HitPoints **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->shield = arg2;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_HitPoints_1shield_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::HitPoints *arg1 = (dgmpp::HitPoints *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::HitPoints **)&jarg1; 
  result = (float) ((arg1)->shield);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1HitPoints(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dgmpp::HitPoints *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::HitPoints *)new dgmpp::HitPoints();
  *(dgmpp::HitPoints **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1HitPoints(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::HitPoints *arg1 = (dgmpp::HitPoints *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::HitPoints **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_ResistancesLayer_1em_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dgmpp::ResistancesLayer *arg1 = (dgmpp::ResistancesLayer *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::ResistancesLayer **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->em = arg2;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_ResistancesLayer_1em_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::ResistancesLayer *arg1 = (dgmpp::ResistancesLayer *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::ResistancesLayer **)&jarg1; 
  result = (float) ((arg1)->em);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_ResistancesLayer_1explosive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dgmpp::ResistancesLayer *arg1 = (dgmpp::ResistancesLayer *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::ResistancesLayer **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->explosive = arg2;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_ResistancesLayer_1explosive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::ResistancesLayer *arg1 = (dgmpp::ResistancesLayer *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::ResistancesLayer **)&jarg1; 
  result = (float) ((arg1)->explosive);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_ResistancesLayer_1kinetic_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dgmpp::ResistancesLayer *arg1 = (dgmpp::ResistancesLayer *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::ResistancesLayer **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->kinetic = arg2;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_ResistancesLayer_1kinetic_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::ResistancesLayer *arg1 = (dgmpp::ResistancesLayer *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::ResistancesLayer **)&jarg1; 
  result = (float) ((arg1)->kinetic);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_ResistancesLayer_1thermal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dgmpp::ResistancesLayer *arg1 = (dgmpp::ResistancesLayer *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::ResistancesLayer **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->thermal = arg2;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_ResistancesLayer_1thermal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::ResistancesLayer *arg1 = (dgmpp::ResistancesLayer *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::ResistancesLayer **)&jarg1; 
  result = (float) ((arg1)->thermal);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1ResistancesLayer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dgmpp::ResistancesLayer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::ResistancesLayer *)new dgmpp::ResistancesLayer();
  *(dgmpp::ResistancesLayer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1ResistancesLayer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::ResistancesLayer *arg1 = (dgmpp::ResistancesLayer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::ResistancesLayer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Resistances_1armor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Resistances *arg1 = (dgmpp::Resistances *) 0 ;
  dgmpp::ResistancesLayer *arg2 = (dgmpp::ResistancesLayer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Resistances **)&jarg1; 
  arg2 = *(dgmpp::ResistancesLayer **)&jarg2; 
  if (arg1) (arg1)->armor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Resistances_1armor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Resistances *arg1 = (dgmpp::Resistances *) 0 ;
  dgmpp::ResistancesLayer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Resistances **)&jarg1; 
  result = (dgmpp::ResistancesLayer *)& ((arg1)->armor);
  *(dgmpp::ResistancesLayer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Resistances_1hull_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Resistances *arg1 = (dgmpp::Resistances *) 0 ;
  dgmpp::ResistancesLayer *arg2 = (dgmpp::ResistancesLayer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Resistances **)&jarg1; 
  arg2 = *(dgmpp::ResistancesLayer **)&jarg2; 
  if (arg1) (arg1)->hull = *arg2;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Resistances_1hull_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Resistances *arg1 = (dgmpp::Resistances *) 0 ;
  dgmpp::ResistancesLayer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Resistances **)&jarg1; 
  result = (dgmpp::ResistancesLayer *)& ((arg1)->hull);
  *(dgmpp::ResistancesLayer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Resistances_1shield_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Resistances *arg1 = (dgmpp::Resistances *) 0 ;
  dgmpp::ResistancesLayer *arg2 = (dgmpp::ResistancesLayer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Resistances **)&jarg1; 
  arg2 = *(dgmpp::ResistancesLayer **)&jarg2; 
  if (arg1) (arg1)->shield = *arg2;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Resistances_1shield_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Resistances *arg1 = (dgmpp::Resistances *) 0 ;
  dgmpp::ResistancesLayer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Resistances **)&jarg1; 
  result = (dgmpp::ResistancesLayer *)& ((arg1)->shield);
  *(dgmpp::ResistancesLayer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1Resistances(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dgmpp::Resistances *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::Resistances *)new dgmpp::Resistances();
  *(dgmpp::Resistances **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1Resistances(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Resistances *arg1 = (dgmpp::Resistances *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::Resistances **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1SqlConnector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::SqlConnector *arg1 = (dgmpp::SqlConnector *) 0 ;
  std::shared_ptr< dgmpp::SqlConnector > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::SqlConnector > **)&jarg1;
  arg1 = (dgmpp::SqlConnector *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_IS_1ONLINE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::IS_ONLINE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_MASS_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::MASS_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CAPACITY_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CAPACITY_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_VOLUME_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::VOLUME_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_RADIUS_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::RADIUS_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_REQUIRED_1SKILL1_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::REQUIRED_SKILL1_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_REQUIRED_1SKILL2_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::REQUIRED_SKILL2_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_REQUIRED_1SKILL3_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::REQUIRED_SKILL3_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_REQUIRED_1SKILL4_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::REQUIRED_SKILL4_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_REQUIRED_1SKILL5_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::REQUIRED_SKILL5_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_REQUIRED_1SKILL6_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::REQUIRED_SKILL6_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_RACE_1ID_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::RACE_ID_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SKILL_1LEVEL_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SKILL_LEVEL_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_IMPLANTNESS_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::IMPLANTNESS_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_BOOSTERNESS_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::BOOSTERNESS_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_LOW_1SLOTS_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::LOW_SLOTS_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_MED_1SLOTS_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::MED_SLOTS_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HI_1SLOTS_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HI_SLOTS_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_RIG_1SLOTS_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::RIG_SLOTS_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_MAX_1SUBSYSTEMS_1SLOTS_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::MAX_SUBSYSTEMS_SLOTS_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_LAUNCHER_1SLOTS_1LEFT_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::LAUNCHER_SLOTS_LEFT_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_TURRET_1SLOTS_1LEFT_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::TURRET_SLOTS_LEFT_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_FITS_1TO_1SHIP_1TYPE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::FITS_TO_SHIP_TYPE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CAN_1FIT_1SHIP_1TYPE1_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CAN_FIT_SHIP_TYPE1_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CAN_1FIT_1SHIP_1TYPE2_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CAN_FIT_SHIP_TYPE2_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CAN_1FIT_1SHIP_1TYPE3_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CAN_FIT_SHIP_TYPE3_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CAN_1FIT_1SHIP_1TYPE4_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CAN_FIT_SHIP_TYPE4_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CAN_1FIT_1SHIP_1TYPE5_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CAN_FIT_SHIP_TYPE5_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CAN_1FIT_1SHIP_1GROUP1_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CAN_FIT_SHIP_GROUP1_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CAN_1FIT_1SHIP_1GROUP2_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CAN_FIT_SHIP_GROUP2_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CAN_1FIT_1SHIP_1GROUP3_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CAN_FIT_SHIP_GROUP3_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CAN_1FIT_1SHIP_1GROUP4_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CAN_FIT_SHIP_GROUP4_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CAN_1FIT_1SHIP_1GROUP5_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CAN_FIT_SHIP_GROUP5_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CAN_1FIT_1SHIP_1GROUP6_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CAN_FIT_SHIP_GROUP6_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CAN_1FIT_1SHIP_1GROUP7_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CAN_FIT_SHIP_GROUP7_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CAN_1FIT_1SHIP_1GROUP8_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CAN_FIT_SHIP_GROUP8_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SUBSYSTEM_1SLOT_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SUBSYSTEM_SLOT_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_RIG_1SIZE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::RIG_SIZE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_MAX_1GROUP_1FITTED_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::MAX_GROUP_FITTED_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CHARGE_1SIZE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CHARGE_SIZE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CHARGE_1GROUP1_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CHARGE_GROUP1_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CHARGE_1GROUP2_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CHARGE_GROUP2_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CHARGE_1GROUP3_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CHARGE_GROUP3_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CHARGE_1GROUP4_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CHARGE_GROUP4_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CHARGE_1GROUP5_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CHARGE_GROUP5_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_MAX_1GROUP_1ACTIVE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::MAX_GROUP_ACTIVE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SPEED_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SPEED_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_DURATION_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::DURATION_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_MISSILE_1LAUNCH_1DURATION_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::MISSILE_LAUNCH_DURATION_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_RELOAD_1TIME_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::RELOAD_TIME_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_MODULE_1REACTIVATION_1DELAY_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::MODULE_REACTIVATION_DELAY_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CHARGE_1RATE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CHARGE_RATE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CRYSTALS_1GET_1DAMAGED_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CRYSTALS_GET_DAMAGED_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HP_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HP_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CRYSTAL_1VOLATILITY_1CHANCE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CRYSTAL_VOLATILITY_CHANCE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CRYSTAL_1VOLATILITY_1DAMAGE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CRYSTAL_VOLATILITY_DAMAGE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CAPACITOR_1NEED_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CAPACITOR_NEED_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CAPACITOR_1BONUS_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CAPACITOR_BONUS_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_POWER_1TRANSFER_1AMOUNT_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::POWER_TRANSFER_AMOUNT_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_ENERGY_1DESTABILIZATION_1AMOUNT_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::ENERGY_DESTABILIZATION_AMOUNT_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CAPACITOR_1CAPACITY_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CAPACITOR_CAPACITY_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CHARGE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CHARGE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_RECHARGE_1RATE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::RECHARGE_RATE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_DISALLOW_1ASSISTANCE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::DISALLOW_ASSISTANCE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_DISALLOW_1OFFENSIVE_1MODIFIERS_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::DISALLOW_OFFENSIVE_MODIFIERS_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_EM_1DAMAGE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::EM_DAMAGE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_KINETIC_1DAMAGE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::KINETIC_DAMAGE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_EXPLOSIVE_1DAMAGE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::EXPLOSIVE_DAMAGE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_THERMAL_1DAMAGE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::THERMAL_DAMAGE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_DAMAGE_1MULTIPLIER_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::DAMAGE_MULTIPLIER_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_MISSILE_1DAMAGE_1MULTIPLIER_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::MISSILE_DAMAGE_MULTIPLIER_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_MAX_1RANGE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::MAX_RANGE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SHIELD_1TRANSFER_1RANGE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SHIELD_TRANSFER_RANGE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_POWER_1TRANSFER_1RANGE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::POWER_TRANSFER_RANGE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_ENERGY_1DESTABILIZATION_1RANGE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::ENERGY_DESTABILIZATION_RANGE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_EMP_1FIELD_1RANGE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::EMP_FIELD_RANGE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_ECM_1BURST_1RANGE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::ECM_BURST_RANGE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_WARP_1SCRAMBLE_1RANGE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::WARP_SCRAMBLE_RANGE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CARGO_1SCAN_1RANGE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CARGO_SCAN_RANGE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SHIP_1SCAN_1RANGE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SHIP_SCAN_RANGE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SURVEY_1SCAN_1RANGE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SURVEY_SCAN_RANGE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_FALLOFF_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::FALLOFF_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SHIP_1SCAN_1FALLOFF_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SHIP_SCAN_FALLOFF_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_TRACKING_1SPEED_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::TRACKING_SPEED_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_MAX_1VELOCITY_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::MAX_VELOCITY_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_EXPLOSION_1DELAY_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::EXPLOSION_DELAY_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_AGILITY_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::AGILITY_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_ARMOR_1DAMAGE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::ARMOR_DAMAGE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SHIELD_1CHARGE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SHIELD_CHARGE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_DAMAGE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::DAMAGE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SHIELD_1CAPACITY_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SHIELD_CAPACITY_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_ARMOR_1HP_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::ARMOR_HP_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SHIELD_1RECHARGE_1RATE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SHIELD_RECHARGE_RATE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_ARMOR_1DAMAGE_1AMOUNT_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::ARMOR_DAMAGE_AMOUNT_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SHIELD_1BONUS_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SHIELD_BONUS_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_STRUCTURE_1DAMAGE_1AMOUNT_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::STRUCTURE_DAMAGE_AMOUNT_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_KINETIC_1DAMAGE_1RESONANCE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::KINETIC_DAMAGE_RESONANCE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_THERMAL_1DAMAGE_1RESONANCE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::THERMAL_DAMAGE_RESONANCE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_EXPLOSIVE_1DAMAGE_1RESONANCE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::EXPLOSIVE_DAMAGE_RESONANCE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_EM_1DAMAGE_1RESONANCE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::EM_DAMAGE_RESONANCE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_ARMOR_1EM_1DAMAGE_1RESONANCE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::ARMOR_EM_DAMAGE_RESONANCE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_ARMOR_1EXPLOSIVE_1DAMAGE_1RESONANCE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::ARMOR_EXPLOSIVE_DAMAGE_RESONANCE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_ARMOR_1KINETIC_1DAMAGE_1RESONANCE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::ARMOR_KINETIC_DAMAGE_RESONANCE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_ARMOR_1THERMAL_1DAMAGE_1RESONANCE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::ARMOR_THERMAL_DAMAGE_RESONANCE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SHIELD_1EM_1DAMAGE_1RESONANCE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SHIELD_EM_DAMAGE_RESONANCE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SHIELD_1EXPLOSIVE_1DAMAGE_1RESONANCE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SHIELD_EXPLOSIVE_DAMAGE_RESONANCE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SHIELD_1KINETIC_1DAMAGE_1RESONANCE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SHIELD_KINETIC_DAMAGE_RESONANCE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SHIELD_1THERMAL_1DAMAGE_1RESONANCE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SHIELD_THERMAL_DAMAGE_RESONANCE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_ENTITY_1MISSILE_1TYPE_1ID_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::ENTITY_MISSILE_TYPE_ID_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_ACTIVATION_1BLOCKED_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::ACTIVATION_BLOCKED_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_UPGRADE_1COST_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::UPGRADE_COST_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_UPGRADE_1CAPACITY_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::UPGRADE_CAPACITY_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CPU_1LOAD_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CPU_LOAD_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_POWER_1LOAD_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::POWER_LOAD_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_POWER_1OUTPUT_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::POWER_OUTPUT_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CPU_1OUTPUT_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CPU_OUTPUT_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_DRONE_1BANDWIDTH_1USED_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::DRONE_BANDWIDTH_USED_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_DRONE_1BANDWIDTH_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::DRONE_BANDWIDTH_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_DRONE_1CAPACITY_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::DRONE_CAPACITY_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_BASE_1WARP_1SPEED_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::BASE_WARP_SPEED_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_WARP_1SPEED_1MULTIPLIER_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::WARP_SPEED_MULTIPLIER_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SIGNATURE_1RADIUS_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SIGNATURE_RADIUS_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_WARP_1CAPACITOR_1NEED_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::WARP_CAPACITOR_NEED_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_MAX_1LOCKED_1TARGETS_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::MAX_LOCKED_TARGETS_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_MAX_1TARGET_1RANGE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::MAX_TARGET_RANGE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SCAN_1RADAR_1STRENGTH_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SCAN_RADAR_STRENGTH_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SCAN_1LADAR_1STRENGTH_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SCAN_LADAR_STRENGTH_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SCAN_1MAGNETOMETRIC_1STRENGTH_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SCAN_MAGNETOMETRIC_STRENGTH_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SCAN_1GRAVIMETRIC_1STRENGTH_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SCAN_GRAVIMETRIC_STRENGTH_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_MAX_1ACTIVE_1DRONES_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::MAX_ACTIVE_DRONES_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SCAN_1RESOLUTION_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SCAN_RESOLUTION_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HI_1SLOT_1MODIFIER_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HI_SLOT_MODIFIER_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_MED_1SLOT_1MODIFIER_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::MED_SLOT_MODIFIER_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_LOW_1SLOT_1MODIFIER_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::LOW_SLOT_MODIFIER_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_TURRET_1HARD_1POINT_1MODIFIER_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::TURRET_HARD_POINT_MODIFIER_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_LAUNCHER_1HARD_1POINT_1MODIFIER_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::LAUNCHER_HARD_POINT_MODIFIER_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HEAT_1ATTENUATION_1HI_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HEAT_ATTENUATION_HI_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HEAT_1ATTENUATION_1LOW_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HEAT_ATTENUATION_LOW_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HEAT_1ATTENUATION_1MED_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HEAT_ATTENUATION_MED_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HEAT_1CAPACITY_1HI_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HEAT_CAPACITY_HI_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HEAT_1CAPACITY_1LOW_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HEAT_CAPACITY_LOW_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HEAT_1CAPACITY_1MED_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HEAT_CAPACITY_MED_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HEAT_1DISSIPATION_1RATE_1HI_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HEAT_DISSIPATION_RATE_HI_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HEAT_1DISSIPATION_1RATE_1LOW_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HEAT_DISSIPATION_RATE_LOW_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HEAT_1DISSIPATION_1RATE_1MED_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HEAT_DISSIPATION_RATE_MED_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HEAT_1GENERATION_1MULTIPLIER_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HEAT_GENERATION_MULTIPLIER_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HEAT_1ABSORBTION_1RATE_1MODIFIER_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HEAT_ABSORBTION_RATE_MODIFIER_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HEAT_1DAMAGE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HEAT_DAMAGE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_POWER_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::POWER_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CPU_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CPU_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HULL_1KINETIC_1DAMAGE_1RESONANCE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HULL_KINETIC_DAMAGE_RESONANCE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HULL_1THERMAL_1DAMAGE_1RESONANCE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HULL_THERMAL_DAMAGE_RESONANCE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HULL_1EXPLOSIVE_1DAMAGE_1RESONANCE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HULL_EXPLOSIVE_DAMAGE_RESONANCE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HULL_1EM_1DAMAGE_1RESONANCE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HULL_EM_DAMAGE_RESONANCE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_MISSILE_1ENTITY_1VELOCITY_1MULTIPLIER_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::MISSILE_ENTITY_VELOCITY_MULTIPLIER_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_MISSILE_1ENTITY_1FLIGHT_1TIME_1MULTIPLIER_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::MISSILE_ENTITY_FLIGHT_TIME_MULTIPLIER_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_DRONE_1CONTROL_1DISTANCE_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::DRONE_CONTROL_DISTANCE_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CHARGE_1ARMOR_1DAMAGE_1MULTIPLIER_1ATTRIBUTE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CHARGE_ARMOR_DAMAGE_MULTIPLIER_ATTRIBUTE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Attribute_1getAttributeID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Attribute *arg1 = (dgmpp::Attribute *) 0 ;
  std::shared_ptr< dgmpp::Attribute const > *smartarg1 = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const dgmpp::Attribute > **)&jarg1;
  arg1 = (dgmpp::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::TypeID)((dgmpp::Attribute const *)arg1)->getAttributeID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Attribute_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Attribute *arg1 = (dgmpp::Attribute *) 0 ;
  std::shared_ptr< dgmpp::Attribute > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Attribute > **)&jarg1;
  arg1 = (dgmpp::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getValue();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Attribute_1getInitialValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Attribute *arg1 = (dgmpp::Attribute *) 0 ;
  std::shared_ptr< dgmpp::Attribute const > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const dgmpp::Attribute > **)&jarg1;
  arg1 = (dgmpp::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)((dgmpp::Attribute const *)arg1)->getInitialValue();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_Attribute_1isStackable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dgmpp::Attribute *arg1 = (dgmpp::Attribute *) 0 ;
  std::shared_ptr< dgmpp::Attribute const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const dgmpp::Attribute > **)&jarg1;
  arg1 = (dgmpp::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((dgmpp::Attribute const *)arg1)->isStackable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_Attribute_1highIsGood(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dgmpp::Attribute *arg1 = (dgmpp::Attribute *) 0 ;
  std::shared_ptr< dgmpp::Attribute const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const dgmpp::Attribute > **)&jarg1;
  arg1 = (dgmpp::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((dgmpp::Attribute const *)arg1)->highIsGood();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_dgmpp_dgmppJNI_Attribute_1getAttributeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  dgmpp::Attribute *arg1 = (dgmpp::Attribute *) 0 ;
  std::shared_ptr< dgmpp::Attribute const > *smartarg1 = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const dgmpp::Attribute > **)&jarg1;
  arg1 = (dgmpp::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  result = (char *)((dgmpp::Attribute const *)arg1)->getAttributeName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1Attribute(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Attribute *arg1 = (dgmpp::Attribute *) 0 ;
  std::shared_ptr< dgmpp::Attribute > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Attribute > **)&jarg1;
  arg1 = (dgmpp::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_ONLINE_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::ONLINE_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_LO_1POWER_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::LO_POWER_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HI_1POWER_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HI_POWER_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_MED_1POWER_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::MED_POWER_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_RIG_1SLOT_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::RIG_SLOT_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SUBSYSTEM_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SUBSYSTEM_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_TURRET_1FITTED_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::TURRET_FITTED_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_LAUNCHER_1FITTED_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::LAUNCHER_FITTED_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_MINING_1LASER_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::MINING_LASER_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_POWER_1BOOSTER_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::POWER_BOOSTER_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_PROJECTILE_1FIRED_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::PROJECTILE_FIRED_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_TARGET_1ATTACK_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::TARGET_ATTACK_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_USE_1MISSILES_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::USE_MISSILES_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_LEECH_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::LEECH_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_ENERGY_1DESTABILIZATION_1NEW_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::ENERGY_DESTABILIZATION_NEW_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_ENERGY_1TRANSFER_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::ENERGY_TRANSFER_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_WARP_1DISRUPTION_1FIELD_1EFFECT_1ONLINE_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::WARP_DISRUPTION_FIELD_EFFECT_ONLINE_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_ARMOR_1REPAIR_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::ARMOR_REPAIR_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_TARGET_1ARMOR_1REPAIR_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::TARGET_ARMOR_REPAIR_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SHIELD_1BOOSTING_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SHIELD_BOOSTING_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SHIELD_1TRANSFER_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SHIELD_TRANSFER_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_STRUCTURE_1REPAIR_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::STRUCTURE_REPAIR_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_REMOTE_1HULL_1REPAIR_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::REMOTE_HULL_REPAIR_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SLOT_1MODIFIER_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SLOT_MODIFIER_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HARD_1POINT_1MODIFIER_1EFFECT_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HARD_POINT_MODIFIER_EFFECT_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_ONLINE_1FOR_1STRUCTURES_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::ONLINE_FOR_STRUCTURES_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_ADAPTIVE_1ARMOR_1HARDENER_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::ADAPTIVE_ARMOR_HARDENER_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_FUELED_1SHIELD_1BOOSTING_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::FUELED_SHIELD_BOOSTING_EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_FUELED_1ARMOR_1REPAIR_1_1EFFECT_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::FUELED_ARMOR_REPAIR__EFFECT_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Effect_1CATEGORY_1GENERIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::Effect::Category result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::Effect::Category)dgmpp::Effect::CATEGORY_GENERIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Effect_1CATEGORY_1ACTIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::Effect::Category result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::Effect::Category)dgmpp::Effect::CATEGORY_ACTIVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Effect_1CATEGORY_1TARGET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::Effect::Category result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::Effect::Category)dgmpp::Effect::CATEGORY_TARGET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Effect_1CATEGORY_1PASSIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::Effect::Category result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::Effect::Category)dgmpp::Effect::CATEGORY_PASSIVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Effect_1CATEGORY_1OVERLOADED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::Effect::Category result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::Effect::Category)dgmpp::Effect::CATEGORY_OVERLOADED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Effect_1CATEGORY_1DUNGEON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::Effect::Category result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::Effect::Category)dgmpp::Effect::CATEGORY_DUNGEON;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Effect_1CATEGORY_1SYSTEM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::Effect::Category result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::Effect::Category)dgmpp::Effect::CATEGORY_SYSTEM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Effect_1getEffectID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Effect *arg1 = (dgmpp::Effect *) 0 ;
  std::shared_ptr< dgmpp::Effect const > *smartarg1 = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const dgmpp::Effect > **)&jarg1;
  arg1 = (dgmpp::Effect *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::TypeID)((dgmpp::Effect const *)arg1)->getEffectID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Effect_1getCategory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Effect *arg1 = (dgmpp::Effect *) 0 ;
  std::shared_ptr< dgmpp::Effect const > *smartarg1 = 0 ;
  dgmpp::Effect::Category result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const dgmpp::Effect > **)&jarg1;
  arg1 = (dgmpp::Effect *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::Effect::Category)((dgmpp::Effect const *)arg1)->getCategory();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_dgmpp_dgmppJNI_Effect_1getEffectName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  dgmpp::Effect *arg1 = (dgmpp::Effect *) 0 ;
  std::shared_ptr< dgmpp::Effect const > *smartarg1 = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const dgmpp::Effect > **)&jarg1;
  arg1 = (dgmpp::Effect *)(smartarg1 ? smartarg1->get() : 0); 
  result = (char *)((dgmpp::Effect const *)arg1)->getEffectName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1Effect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Effect *arg1 = (dgmpp::Effect *) 0 ;
  std::shared_ptr< dgmpp::Effect > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Effect > **)&jarg1;
  arg1 = (dgmpp::Effect *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_ANY_1GROUP_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::ANY_GROUP_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CHARACTER_1GROUP_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CHARACTER_GROUP_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_WARP_1DISRUPT_1FIELD_1GENERATOR_1GROUP_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::WARP_DISRUPT_FIELD_GENERATOR_GROUP_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CAPACITOR_1BOOSTER_1GROUP_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CAPACITOR_BOOSTER_GROUP_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CONTROL_1TOWER_1GROUP_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CONTROL_TOWER_GROUP_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_MODULE_1CATEGORY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::MODULE_CATEGORY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CHARGE_1CATEGORY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CHARGE_CATEGORY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_DRONE_1CATEGORY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::DRONE_CATEGORY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SUBSYSTEM_1CATEGORY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::SUBSYSTEM_CATEGORY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_STARBASE_1CATEGORY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::STARBASE_CATEGORY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_STRUCTURE_1MODULE_1CATEGORY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::STRUCTURE_MODULE_CATEGORY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_FIGHTER_1CATEGORY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::FIGHTER_CATEGORY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_MISSILE_1LAUNCHER_1OPERATION_1TYPE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::MISSILE_LAUNCHER_OPERATION_TYPE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_CALDARI_1RACE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::CALDARI_RACE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_MINMATAR_1RACE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::MINMATAR_RACE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_AMARR_1RACE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::AMARR_RACE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_GALLENTE_1RACE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::GALLENTE_RACE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_NITROGEN_1FUEL_1BLOCK_1TYPE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::NITROGEN_FUEL_BLOCK_TYPE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HYDROGEN_1FUEL_1BLOCK_1TYPE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HYDROGEN_FUEL_BLOCK_TYPE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_HELIUM_1FUEL_1BLOCK_1TYPE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::HELIUM_FUEL_BLOCK_TYPE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_OXYGEN_1FUEL_1BLOCK_1TYPE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::TypeID)(dgmpp::TypeID)dgmpp::OXYGEN_FUEL_BLOCK_TYPE_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Item_1getEngine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Item *arg1 = (dgmpp::Item *) 0 ;
  std::shared_ptr< dgmpp::Item > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Engine > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Item > **)&jarg1;
  arg1 = (dgmpp::Item *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getEngine();
  *(std::shared_ptr< dgmpp::Engine > **)&jresult = result ? new std::shared_ptr< dgmpp::Engine >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Item_1getOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Item *arg1 = (dgmpp::Item *) 0 ;
  std::shared_ptr< dgmpp::Item const > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Item > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const dgmpp::Item > **)&jarg1;
  arg1 = (dgmpp::Item *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((dgmpp::Item const *)arg1)->getOwner();
  *(std::shared_ptr< dgmpp::Item > **)&jresult = result ? new std::shared_ptr< dgmpp::Item >(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Item_1getTypeID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Item *arg1 = (dgmpp::Item *) 0 ;
  std::shared_ptr< dgmpp::Item > *smartarg1 = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Item > **)&jarg1;
  arg1 = (dgmpp::Item *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::TypeID)(arg1)->getTypeID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Item_1getGroupID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Item *arg1 = (dgmpp::Item *) 0 ;
  std::shared_ptr< dgmpp::Item > *smartarg1 = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Item > **)&jarg1;
  arg1 = (dgmpp::Item *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::TypeID)(arg1)->getGroupID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Item_1getCategoryID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Item *arg1 = (dgmpp::Item *) 0 ;
  std::shared_ptr< dgmpp::Item > *smartarg1 = 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Item > **)&jarg1;
  arg1 = (dgmpp::Item *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::TypeID)(arg1)->getCategoryID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Item_1getAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Item *arg1 = (dgmpp::Item *) 0 ;
  dgmpp::TypeID arg2 ;
  std::shared_ptr< dgmpp::Item > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Attribute > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Item > **)&jarg1;
  arg1 = (dgmpp::Item *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (arg1)->getAttribute(arg2);
  *(std::shared_ptr< dgmpp::Attribute > **)&jresult = result ? new std::shared_ptr< dgmpp::Attribute >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Item_1getAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Item *arg1 = (dgmpp::Item *) 0 ;
  std::shared_ptr< dgmpp::Item > *smartarg1 = 0 ;
  dgmpp::AttributesMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Item > **)&jarg1;
  arg1 = (dgmpp::Item *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::AttributesMap *) &(arg1)->getAttributes();
  *(dgmpp::AttributesMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_Item_1hasAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  dgmpp::Item *arg1 = (dgmpp::Item *) 0 ;
  dgmpp::TypeID arg2 ;
  std::shared_ptr< dgmpp::Item > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Item > **)&jarg1;
  arg1 = (dgmpp::Item *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (bool)(arg1)->hasAttribute(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Item_1getEffect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Item *arg1 = (dgmpp::Item *) 0 ;
  dgmpp::TypeID arg2 ;
  std::shared_ptr< dgmpp::Item > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Effect > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Item > **)&jarg1;
  arg1 = (dgmpp::Item *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (arg1)->getEffect(arg2);
  *(std::shared_ptr< dgmpp::Effect > **)&jresult = result ? new std::shared_ptr< dgmpp::Effect >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_Item_1requireSkill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  dgmpp::Item *arg1 = (dgmpp::Item *) 0 ;
  dgmpp::TypeID arg2 ;
  std::shared_ptr< dgmpp::Item > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Item > **)&jarg1;
  arg1 = (dgmpp::Item *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (bool)(arg1)->requireSkill(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_Item_1hasEffect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  dgmpp::Item *arg1 = (dgmpp::Item *) 0 ;
  dgmpp::TypeID arg2 ;
  std::shared_ptr< dgmpp::Item > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Item > **)&jarg1;
  arg1 = (dgmpp::Item *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (bool)(arg1)->hasEffect(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_dgmpp_dgmppJNI_Item_1getTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  dgmpp::Item *arg1 = (dgmpp::Item *) 0 ;
  std::shared_ptr< dgmpp::Item > *smartarg1 = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Item > **)&jarg1;
  arg1 = (dgmpp::Item *)(smartarg1 ? smartarg1->get() : 0); 
  result = (char *)(arg1)->getTypeName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1Item(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Item *arg1 = (dgmpp::Item *) 0 ;
  std::shared_ptr< dgmpp::Item > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Item > **)&jarg1;
  arg1 = (dgmpp::Item *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Booster_1getSlot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Booster *arg1 = (dgmpp::Booster *) 0 ;
  std::shared_ptr< dgmpp::Booster > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Booster > **)&jarg1;
  arg1 = (dgmpp::Booster *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->getSlot();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1Booster(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Booster *arg1 = (dgmpp::Booster *) 0 ;
  std::shared_ptr< dgmpp::Booster > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Booster > **)&jarg1;
  arg1 = (dgmpp::Booster *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Implant_1getSlot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Implant *arg1 = (dgmpp::Implant *) 0 ;
  std::shared_ptr< dgmpp::Implant > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Implant > **)&jarg1;
  arg1 = (dgmpp::Implant *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->getSlot();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1Implant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Implant *arg1 = (dgmpp::Implant *) 0 ;
  std::shared_ptr< dgmpp::Implant > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Implant > **)&jarg1;
  arg1 = (dgmpp::Implant *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_Skill_1isLearned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dgmpp::Skill *arg1 = (dgmpp::Skill *) 0 ;
  std::shared_ptr< dgmpp::Skill const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const dgmpp::Skill > **)&jarg1;
  arg1 = (dgmpp::Skill *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((dgmpp::Skill const *)arg1)->isLearned();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Skill_1getSkillLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Skill *arg1 = (dgmpp::Skill *) 0 ;
  std::shared_ptr< dgmpp::Skill > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Skill > **)&jarg1;
  arg1 = (dgmpp::Skill *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->getSkillLevel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1Skill(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Skill *arg1 = (dgmpp::Skill *) 0 ;
  std::shared_ptr< dgmpp::Skill > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Skill > **)&jarg1;
  arg1 = (dgmpp::Skill *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1DamageVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  dgmpp::DamageVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (dgmpp::DamageVector *)new dgmpp::DamageVector(arg1);
  *(dgmpp::DamageVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1DamageVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dgmpp::DamageVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::DamageVector *)new dgmpp::DamageVector();
  *(dgmpp::DamageVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1DamageVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  dgmpp::DamageVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (dgmpp::DamageVector *)new dgmpp::DamageVector(arg1,arg2,arg3,arg4);
  *(dgmpp::DamageVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_DamageVector_1emAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dgmpp::DamageVector *arg1 = (dgmpp::DamageVector *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::DamageVector **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->emAmount = arg2;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_DamageVector_1emAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::DamageVector *arg1 = (dgmpp::DamageVector *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::DamageVector **)&jarg1; 
  result = (float) ((arg1)->emAmount);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_DamageVector_1thermalAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dgmpp::DamageVector *arg1 = (dgmpp::DamageVector *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::DamageVector **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->thermalAmount = arg2;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_DamageVector_1thermalAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::DamageVector *arg1 = (dgmpp::DamageVector *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::DamageVector **)&jarg1; 
  result = (float) ((arg1)->thermalAmount);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_DamageVector_1kineticAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dgmpp::DamageVector *arg1 = (dgmpp::DamageVector *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::DamageVector **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->kineticAmount = arg2;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_DamageVector_1kineticAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::DamageVector *arg1 = (dgmpp::DamageVector *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::DamageVector **)&jarg1; 
  result = (float) ((arg1)->kineticAmount);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_DamageVector_1explosiveAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dgmpp::DamageVector *arg1 = (dgmpp::DamageVector *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::DamageVector **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->explosiveAmount = arg2;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_DamageVector_1explosiveAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::DamageVector *arg1 = (dgmpp::DamageVector *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::DamageVector **)&jarg1; 
  result = (float) ((arg1)->explosiveAmount);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_DamageVector_1total(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::DamageVector *arg1 = (dgmpp::DamageVector *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::DamageVector **)&jarg1; 
  result = (float)dgmpp_DamageVector_total(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1DamageVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::DamageVector *arg1 = (dgmpp::DamageVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::DamageVector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1DamagePattern_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dgmpp::DamagePattern *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::DamagePattern *)new dgmpp::DamagePattern();
  *(dgmpp::DamagePattern **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1DamagePattern_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::DamageVector *arg1 = 0 ;
  dgmpp::DamagePattern *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::DamageVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dgmpp::DamageVector const & reference is null");
    return 0;
  } 
  result = (dgmpp::DamagePattern *)new dgmpp::DamagePattern((dgmpp::DamageVector const &)*arg1);
  *(dgmpp::DamagePattern **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1DamagePattern_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  dgmpp::DamagePattern *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (dgmpp::DamagePattern *)new dgmpp::DamagePattern(arg1,arg2,arg3,arg4);
  *(dgmpp::DamagePattern **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1DamagePattern(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::DamagePattern *arg1 = (dgmpp::DamagePattern *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::DamagePattern **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1Charge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Charge *arg1 = (dgmpp::Charge *) 0 ;
  std::shared_ptr< dgmpp::Charge > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Charge > **)&jarg1;
  arg1 = (dgmpp::Charge *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Module_1SLOT_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::Module::Slot result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::Module::Slot)dgmpp::Module::SLOT_UNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Module_1SLOT_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::Module::Slot result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::Module::Slot)dgmpp::Module::SLOT_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Module_1STATE_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::Module::State result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::Module::State)dgmpp::Module::STATE_UNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Module_1HARDPOINT_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::Module::Hardpoint result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::Module::Hardpoint)dgmpp::Module::HARDPOINT_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Module_1getSlot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  dgmpp::Module::Slot result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::Module::Slot)(arg1)->getSlot();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Module_1getHardpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  dgmpp::Module::Hardpoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::Module::Hardpoint)(arg1)->getHardpoint();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_Module_1canHaveState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Module::State arg2 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::Module::State)jarg2; 
  result = (bool)(arg1)->canHaveState(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Module_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  dgmpp::Module::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::Module::State)(arg1)->getState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Module_1getPreferredState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  dgmpp::Module::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::Module::State)(arg1)->getPreferredState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Module_1setState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Module::State arg2 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::Module::State)jarg2; 
  dgmpp_Module_setState(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Module_1setCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::TypeID arg2 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Charge > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (arg1)->setCharge(arg2);
  *(std::shared_ptr< dgmpp::Charge > **)&jresult = result ? new std::shared_ptr< dgmpp::Charge >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Module_1clearCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clearCharge();
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Module_1getCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Charge > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getCharge();
  *(std::shared_ptr< dgmpp::Charge > **)&jresult = result ? new std::shared_ptr< dgmpp::Charge >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Module_1getChargeGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  std::vector< dgmpp::TypeID > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< dgmpp::TypeID > *) &(arg1)->getChargeGroups();
  *(std::vector< dgmpp::TypeID > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Module_1getChargeSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->getChargeSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_Module_1requireTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->requireTarget();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Module_1setTarget_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Ship > *arg2 = 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Ship > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(std::shared_ptr< dgmpp::Ship > **)&jarg2 : &tempnull2; 
  (arg1)->setTarget((std::shared_ptr< dgmpp::Ship > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Module_1setTarget_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->setTarget();
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Module_1clearTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clearTarget();
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Module_1getTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Ship > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getTarget();
  *(std::shared_ptr< dgmpp::Ship > **)&jresult = result ? new std::shared_ptr< dgmpp::Ship >(result) : 0; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Module_1getReloadTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getReloadTime();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Module_1getCycleTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getCycleTime();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Module_1getRawCycleTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getRawCycleTime();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_Module_1factorReload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->factorReload();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Module_1setFactorReload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  bool arg2 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->setFactorReload(arg2);
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Module_1getCharges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->getCharges();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Module_1getShots(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->getShots();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Module_1getCapUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getCapUse();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Module_1getCpuUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getCpuUse();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Module_1getPowerGridUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getPowerGridUse();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Module_1getCalibrationUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getCalibrationUse();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Module_1getVolley(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  dgmpp::DamageVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getVolley();
  *(dgmpp::DamageVector **)&jresult = new dgmpp::DamageVector((const dgmpp::DamageVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Module_1getDps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  dgmpp::DamageVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getDps();
  *(dgmpp::DamageVector **)&jresult = new dgmpp::DamageVector((const dgmpp::DamageVector &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Module_1getMaxRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getMaxRange();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Module_1getFalloff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getFalloff();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Module_1getAccuracyScore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getAccuracyScore();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Module_1getSignatureResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getSignatureResolution();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Module_1getAngularVelocity_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jfloat jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  float arg2 ;
  float arg3 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)(arg1)->getAngularVelocity(arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Module_1getAngularVelocity_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jfloat jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  float arg2 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (float)jarg2; 
  result = (float)(arg1)->getAngularVelocity(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Module_1getMiningYield(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getMiningYield();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Module_1getLifeTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getLifeTime();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Module_1setLifeTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  float arg2 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (float)jarg2; 
  (arg1)->setLifeTime(arg2);
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1Module(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::shared_ptr< dgmpp::Module > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Module > **)&jarg1;
  arg1 = (dgmpp::Module *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Drone_1FIGHTER_1SQUADRON_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::Drone::FighterSquadron result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::Drone::FighterSquadron)dgmpp::Drone::FIGHTER_SQUADRON_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Drone_1setTarget_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  std::shared_ptr< dgmpp::Ship > *arg2 = 0 ;
  std::shared_ptr< dgmpp::Drone > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Ship > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Drone > **)&jarg1;
  arg1 = (dgmpp::Drone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(std::shared_ptr< dgmpp::Ship > **)&jarg2 : &tempnull2; 
  (arg1)->setTarget((std::shared_ptr< dgmpp::Ship > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Drone_1setTarget_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  std::shared_ptr< dgmpp::Drone > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Drone > **)&jarg1;
  arg1 = (dgmpp::Drone *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->setTarget();
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Drone_1clearTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  std::shared_ptr< dgmpp::Drone > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Drone > **)&jarg1;
  arg1 = (dgmpp::Drone *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clearTarget();
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Drone_1getTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  std::shared_ptr< dgmpp::Drone > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Ship > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Drone > **)&jarg1;
  arg1 = (dgmpp::Drone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getTarget();
  *(std::shared_ptr< dgmpp::Ship > **)&jresult = result ? new std::shared_ptr< dgmpp::Ship >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_Drone_1dealsDamage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  std::shared_ptr< dgmpp::Drone > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Drone > **)&jarg1;
  arg1 = (dgmpp::Drone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->dealsDamage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Drone_1getCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  std::shared_ptr< dgmpp::Drone > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Charge > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Drone > **)&jarg1;
  arg1 = (dgmpp::Drone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getCharge();
  *(std::shared_ptr< dgmpp::Charge > **)&jresult = result ? new std::shared_ptr< dgmpp::Charge >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Drone_1setActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  bool arg2 ;
  std::shared_ptr< dgmpp::Drone > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Drone > **)&jarg1;
  arg1 = (dgmpp::Drone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->setActive(arg2);
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_Drone_1isActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  std::shared_ptr< dgmpp::Drone > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Drone > **)&jarg1;
  arg1 = (dgmpp::Drone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isActive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_Drone_1isAssistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  std::shared_ptr< dgmpp::Drone > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Drone > **)&jarg1;
  arg1 = (dgmpp::Drone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isAssistance();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_Drone_1isOffensive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  std::shared_ptr< dgmpp::Drone > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Drone > **)&jarg1;
  arg1 = (dgmpp::Drone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isOffensive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Drone_1getSquadron(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  std::shared_ptr< dgmpp::Drone > *smartarg1 = 0 ;
  dgmpp::Drone::FighterSquadron result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Drone > **)&jarg1;
  arg1 = (dgmpp::Drone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::Drone::FighterSquadron)(arg1)->getSquadron();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Drone_1getSquadronSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  std::shared_ptr< dgmpp::Drone > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Drone > **)&jarg1;
  arg1 = (dgmpp::Drone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->getSquadronSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Drone_1getCycleTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  std::shared_ptr< dgmpp::Drone > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Drone > **)&jarg1;
  arg1 = (dgmpp::Drone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getCycleTime();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Drone_1getVolley(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  std::shared_ptr< dgmpp::Drone > *smartarg1 = 0 ;
  dgmpp::DamageVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Drone > **)&jarg1;
  arg1 = (dgmpp::Drone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getVolley();
  *(dgmpp::DamageVector **)&jresult = new dgmpp::DamageVector((const dgmpp::DamageVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Drone_1getDps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  std::shared_ptr< dgmpp::Drone > *smartarg1 = 0 ;
  dgmpp::DamageVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Drone > **)&jarg1;
  arg1 = (dgmpp::Drone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getDps();
  *(dgmpp::DamageVector **)&jresult = new dgmpp::DamageVector((const dgmpp::DamageVector &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Drone_1getMaxRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  std::shared_ptr< dgmpp::Drone > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Drone > **)&jarg1;
  arg1 = (dgmpp::Drone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getMaxRange();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Drone_1getFalloff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  std::shared_ptr< dgmpp::Drone > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Drone > **)&jarg1;
  arg1 = (dgmpp::Drone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getFalloff();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Drone_1getAccuracyScore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  std::shared_ptr< dgmpp::Drone > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Drone > **)&jarg1;
  arg1 = (dgmpp::Drone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getAccuracyScore();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Drone_1getMiningYield(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  std::shared_ptr< dgmpp::Drone > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Drone > **)&jarg1;
  arg1 = (dgmpp::Drone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getMiningYield();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Drone_1getVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  std::shared_ptr< dgmpp::Drone > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Drone > **)&jarg1;
  arg1 = (dgmpp::Drone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getVelocity();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1Drone(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  std::shared_ptr< dgmpp::Drone > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Drone > **)&jarg1;
  arg1 = (dgmpp::Drone *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Ship_1addModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::TypeID arg2 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Module > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (arg1)->addModule(arg2);
  *(std::shared_ptr< dgmpp::Module > **)&jresult = result ? new std::shared_ptr< dgmpp::Module >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Ship_1removeModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Module > arg2 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Module > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< dgmpp::Module > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->removeModule(arg2);
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Ship_1addDrone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::TypeID arg2 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Drone > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (arg1)->addDrone(arg2);
  *(std::shared_ptr< dgmpp::Drone > **)&jresult = result ? new std::shared_ptr< dgmpp::Drone >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Ship_1removeDrone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Drone > arg2 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Drone > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< dgmpp::Drone > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->removeDrone(arg2);
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Ship_1getModules(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< dgmpp::Module > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = dgmpp_Ship_getModules(arg1);
  *(std::vector< std::shared_ptr< dgmpp::Module > > **)&jresult = new std::vector< std::shared_ptr< dgmpp::Module > >((const std::vector< std::shared_ptr< dgmpp::Module > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Ship_1getDrones(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< dgmpp::Drone > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = dgmpp_Ship_getDrones(arg1);
  *(std::vector< std::shared_ptr< dgmpp::Drone > > **)&jresult = new std::vector< std::shared_ptr< dgmpp::Drone > >((const std::vector< std::shared_ptr< dgmpp::Drone > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Ship_1getProjectedModules(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< dgmpp::Module > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = dgmpp_Ship_getProjectedModules(arg1);
  *(std::vector< std::shared_ptr< dgmpp::Module > > **)&jresult = new std::vector< std::shared_ptr< dgmpp::Module > >((const std::vector< std::shared_ptr< dgmpp::Module > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Ship_1getProjectedDrones(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< dgmpp::Drone > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = dgmpp_Ship_getProjectedDrones(arg1);
  *(std::vector< std::shared_ptr< dgmpp::Drone > > **)&jresult = new std::vector< std::shared_ptr< dgmpp::Drone > >((const std::vector< std::shared_ptr< dgmpp::Drone > > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_Ship_1isDisallowedAssistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isDisallowedAssistance();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_Ship_1isDisallowedOffensiveModifiers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isDisallowedOffensiveModifiers();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Ship_1addProjectedModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Module > arg2 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Module > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< dgmpp::Module > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->addProjectedModule(arg2);
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Ship_1removeProjectedModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Module > arg2 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Module > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< dgmpp::Module > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->removeProjectedModule(arg2);
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Ship_1addProjectedDrone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Drone > arg2 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Drone > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< dgmpp::Drone > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->addProjectedDrone(arg2);
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Ship_1removeProjectedDrone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Drone > arg2 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Drone > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< dgmpp::Drone > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->removeProjectedDrone(arg2);
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Ship_1getDamagePattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  dgmpp::DamagePattern *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::DamagePattern *) &(arg1)->getDamagePattern();
  *(dgmpp::DamagePattern **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Ship_1setDamagePattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::DamagePattern *arg2 = 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(dgmpp::DamagePattern **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dgmpp::DamagePattern const & reference is null");
    return ;
  } 
  (arg1)->setDamagePattern((dgmpp::DamagePattern const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Ship_1addCargo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::TypeID arg2 ;
  size_t arg3 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Cargo > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::TypeID)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (arg1)->addCargo(arg2,arg3);
  *(std::shared_ptr< dgmpp::Cargo > **)&jresult = result ? new std::shared_ptr< dgmpp::Cargo >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Ship_1removeCarge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::TypeID arg2 ;
  size_t arg3 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::TypeID)jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->removeCarge(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Ship_1getCargo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  dgmpp::CargoList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::CargoList *) &(arg1)->getCargo();
  *(dgmpp::CargoList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Ship_1getNumberOfSlots(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Module::Slot arg2 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::Module::Slot)jarg2; 
  result = (int)(arg1)->getNumberOfSlots(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Ship_1getFreeSlots(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Module::Slot arg2 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::Module::Slot)jarg2; 
  result = (int)(arg1)->getFreeSlots(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Ship_1getUsedSlots(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Module::Slot arg2 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::Module::Slot)jarg2; 
  result = (int)(arg1)->getUsedSlots(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Ship_1getNumberOfHardpoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Module::Hardpoint arg2 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::Module::Hardpoint)jarg2; 
  result = (int)(arg1)->getNumberOfHardpoints(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Ship_1getFreeHardpoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Module::Hardpoint arg2 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::Module::Hardpoint)jarg2; 
  result = (int)(arg1)->getFreeHardpoints(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Ship_1getUsedHardpoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Module::Hardpoint arg2 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::Module::Hardpoint)jarg2; 
  result = (int)(arg1)->getUsedHardpoints(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Ship_1getRigSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->getRigSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Ship_1getRaceID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->getRaceID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getCapacity();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getOreHoldCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getOreHoldCapacity();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getCalibrationUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getCalibrationUsed();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getTotalCalibration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getTotalCalibration();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getPowerGridUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getPowerGridUsed();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getTotalPowerGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getTotalPowerGrid();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getCpuUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getCpuUsed();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getTotalCpu(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getTotalCpu();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getDroneBandwidthUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getDroneBandwidthUsed();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getTotalDroneBandwidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getTotalDroneBandwidth();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getDroneBayUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getDroneBayUsed();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getTotalDroneBay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getTotalDroneBay();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getCapCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getCapCapacity();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_Ship_1isCapStable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isCapStable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getCapLastsTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getCapLastsTime();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getCapStableLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getCapStableLevel();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getCapUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getCapUsed();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getCapRecharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getCapRecharge();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getCapRechargeTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getCapRechargeTime();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Ship_1getResistances(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  dgmpp::Resistances *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::Resistances *) &(arg1)->getResistances();
  *(dgmpp::Resistances **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Ship_1getTank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  dgmpp::Tank *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::Tank *) &(arg1)->getTank();
  *(dgmpp::Tank **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Ship_1getEffectiveTank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  dgmpp::Tank *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::Tank *) &(arg1)->getEffectiveTank();
  *(dgmpp::Tank **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Ship_1getSustainableTank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  dgmpp::Tank *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::Tank *) &(arg1)->getSustainableTank();
  *(dgmpp::Tank **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Ship_1getEffectiveSustainableTank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  dgmpp::Tank *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::Tank *) &(arg1)->getEffectiveSustainableTank();
  *(dgmpp::Tank **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Ship_1getHitPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  dgmpp::HitPoints *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::HitPoints *) &(arg1)->getHitPoints();
  *(dgmpp::HitPoints **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Ship_1getEffectiveHitPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  dgmpp::HitPoints *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::HitPoints *) &(arg1)->getEffectiveHitPoints();
  *(dgmpp::HitPoints **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getShieldRecharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getShieldRecharge();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Ship_1getWeaponDps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  dgmpp::DamageVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getWeaponDps();
  *(dgmpp::DamageVector **)&jresult = new dgmpp::DamageVector((const dgmpp::DamageVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Ship_1getWeaponVolley(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  dgmpp::DamageVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getWeaponVolley();
  *(dgmpp::DamageVector **)&jresult = new dgmpp::DamageVector((const dgmpp::DamageVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Ship_1getDroneDps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  dgmpp::DamageVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getDroneDps();
  *(dgmpp::DamageVector **)&jresult = new dgmpp::DamageVector((const dgmpp::DamageVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Ship_1getDroneVolley(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  dgmpp::DamageVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getDroneVolley();
  *(dgmpp::DamageVector **)&jresult = new dgmpp::DamageVector((const dgmpp::DamageVector &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getMinerYield(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getMinerYield();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getDroneYield(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getDroneYield();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getAlignTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getAlignTime();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getWarpSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getWarpSpeed();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getMaxWarpDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getMaxWarpDistance();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getVelocity();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getSignatureRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getSignatureRadius();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getMass();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getVolume();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getAgility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getAgility();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getMaxVelocityInOrbit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  float arg2 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (float)jarg2; 
  result = (float)(arg1)->getMaxVelocityInOrbit(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getOrbitRadiusWithTransverseVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  float arg2 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (float)jarg2; 
  result = (float)(arg1)->getOrbitRadiusWithTransverseVelocity(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getOrbitRadiusWithAngularVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  float arg2 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (float)jarg2; 
  result = (float)(arg1)->getOrbitRadiusWithAngularVelocity(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Ship_1getMaxTargets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->getMaxTargets();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getMaxTargetRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getMaxTargetRange();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getScanStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getScanStrength();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Ship_1getScanType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  dgmpp::Ship::ScanType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::Ship::ScanType)(arg1)->getScanType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getProbeSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getProbeSize();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Ship_1getScanResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getScanResolution();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Ship_1getDroneSquadronLimit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Drone::FighterSquadron arg2 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::Drone::FighterSquadron)jarg2; 
  result = (int)(arg1)->getDroneSquadronLimit(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Ship_1getDroneSquadronLimit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->getDroneSquadronLimit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Ship_1getDroneSquadronUsed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Drone::FighterSquadron arg2 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::Drone::FighterSquadron)jarg2; 
  result = (int)(arg1)->getDroneSquadronUsed(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Ship_1getDroneSquadronUsed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->getDroneSquadronUsed();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Ship_1getTotalFighterLaunchTubes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->getTotalFighterLaunchTubes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_Ship_1getFighterLaunchTubesUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->getFighterLaunchTubesUsed();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1Ship(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::shared_ptr< dgmpp::Ship > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Ship > **)&jarg1;
  arg1 = (dgmpp::Ship *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1SkillLevelsMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< dgmpp::TypeID,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< dgmpp::TypeID,int > *)new std::map< dgmpp::TypeID,int >();
  *(std::map< dgmpp::TypeID,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1SkillLevelsMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,int > *arg1 = 0 ;
  std::map< dgmpp::TypeID,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,int > const & reference is null");
    return 0;
  } 
  result = (std::map< dgmpp::TypeID,int > *)new std::map< dgmpp::TypeID,int >((std::map< int,int > const &)*arg1);
  *(std::map< dgmpp::TypeID,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_SkillLevelsMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< dgmpp::TypeID,int > *arg1 = (std::map< dgmpp::TypeID,int > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dgmpp::TypeID,int > **)&jarg1; 
  result = (unsigned int)((std::map< dgmpp::TypeID,int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_SkillLevelsMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< dgmpp::TypeID,int > *arg1 = (std::map< dgmpp::TypeID,int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dgmpp::TypeID,int > **)&jarg1; 
  result = (bool)((std::map< dgmpp::TypeID,int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_SkillLevelsMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< dgmpp::TypeID,int > *arg1 = (std::map< dgmpp::TypeID,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dgmpp::TypeID,int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jint JNICALL Java_dgmpp_dgmppJNI_SkillLevelsMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::map< dgmpp::TypeID,int > *arg1 = (std::map< dgmpp::TypeID,int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dgmpp::TypeID,int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (int *) &std_map_Sl_dgmpp_TypeID_Sc_int_Sg__get(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_SkillLevelsMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::map< dgmpp::TypeID,int > *arg1 = (std::map< dgmpp::TypeID,int > *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp2 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dgmpp::TypeID,int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_dgmpp_TypeID_Sc_int_Sg__set(arg1,(int const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_SkillLevelsMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::map< dgmpp::TypeID,int > *arg1 = (std::map< dgmpp::TypeID,int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dgmpp::TypeID,int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    std_map_Sl_dgmpp_TypeID_Sc_int_Sg__del(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_SkillLevelsMap_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::map< dgmpp::TypeID,int > *arg1 = (std::map< dgmpp::TypeID,int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dgmpp::TypeID,int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_dgmpp_TypeID_Sc_int_Sg__has_key(arg1,(int const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1SkillLevelsMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< dgmpp::TypeID,int > *arg1 = (std::map< dgmpp::TypeID,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< dgmpp::TypeID,int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Character_1getShip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  std::shared_ptr< dgmpp::Character > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Ship > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Character > **)&jarg1;
  arg1 = (dgmpp::Character *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getShip();
  *(std::shared_ptr< dgmpp::Ship > **)&jresult = result ? new std::shared_ptr< dgmpp::Ship >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Character_1setShip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  dgmpp::TypeID arg2 ;
  std::shared_ptr< dgmpp::Character > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Ship > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Character > **)&jarg1;
  arg1 = (dgmpp::Character *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (arg1)->setShip(arg2);
  *(std::shared_ptr< dgmpp::Ship > **)&jresult = result ? new std::shared_ptr< dgmpp::Ship >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Character_1getSkill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  dgmpp::TypeID arg2 ;
  std::shared_ptr< dgmpp::Character > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Skill > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Character > **)&jarg1;
  arg1 = (dgmpp::Character *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (arg1)->getSkill(arg2);
  *(std::shared_ptr< dgmpp::Skill > **)&jresult = result ? new std::shared_ptr< dgmpp::Skill >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_Character_1emptyImplantSlot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  int arg2 ;
  std::shared_ptr< dgmpp::Character > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Character > **)&jarg1;
  arg1 = (dgmpp::Character *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->emptyImplantSlot(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_dgmpp_dgmppJNI_Character_1emptyBoosterSlot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  int arg2 ;
  std::shared_ptr< dgmpp::Character > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Character > **)&jarg1;
  arg1 = (dgmpp::Character *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->emptyBoosterSlot(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Character_1getImplant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  int arg2 ;
  std::shared_ptr< dgmpp::Character > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Implant > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Character > **)&jarg1;
  arg1 = (dgmpp::Character *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (arg1)->getImplant(arg2);
  *(std::shared_ptr< dgmpp::Implant > **)&jresult = result ? new std::shared_ptr< dgmpp::Implant >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Character_1getBooster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  int arg2 ;
  std::shared_ptr< dgmpp::Character > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Booster > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Character > **)&jarg1;
  arg1 = (dgmpp::Character *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (arg1)->getBooster(arg2);
  *(std::shared_ptr< dgmpp::Booster > **)&jresult = result ? new std::shared_ptr< dgmpp::Booster >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Character_1addImplant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  dgmpp::TypeID arg2 ;
  std::shared_ptr< dgmpp::Character > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Implant > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Character > **)&jarg1;
  arg1 = (dgmpp::Character *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (arg1)->addImplant(arg2);
  *(std::shared_ptr< dgmpp::Implant > **)&jresult = result ? new std::shared_ptr< dgmpp::Implant >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Character_1addBooster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  dgmpp::TypeID arg2 ;
  std::shared_ptr< dgmpp::Character > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Booster > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Character > **)&jarg1;
  arg1 = (dgmpp::Character *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (arg1)->addBooster(arg2);
  *(std::shared_ptr< dgmpp::Booster > **)&jresult = result ? new std::shared_ptr< dgmpp::Booster >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Character_1removeImplant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  std::shared_ptr< dgmpp::Implant > *arg2 = 0 ;
  std::shared_ptr< dgmpp::Character > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Implant > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Character > **)&jarg1;
  arg1 = (dgmpp::Character *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(std::shared_ptr< dgmpp::Implant > **)&jarg2 : &tempnull2; 
  (arg1)->removeImplant((std::shared_ptr< dgmpp::Implant > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Character_1removeBooster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  std::shared_ptr< dgmpp::Booster > *arg2 = 0 ;
  std::shared_ptr< dgmpp::Character > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Booster > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Character > **)&jarg1;
  arg1 = (dgmpp::Character *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(std::shared_ptr< dgmpp::Booster > **)&jarg2 : &tempnull2; 
  (arg1)->removeBooster((std::shared_ptr< dgmpp::Booster > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Character_1getImplants(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  std::shared_ptr< dgmpp::Character > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< dgmpp::Implant > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Character > **)&jarg1;
  arg1 = (dgmpp::Character *)(smartarg1 ? smartarg1->get() : 0); 
  result = dgmpp_Character_getImplants(arg1);
  *(std::vector< std::shared_ptr< dgmpp::Implant > > **)&jresult = new std::vector< std::shared_ptr< dgmpp::Implant > >((const std::vector< std::shared_ptr< dgmpp::Implant > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Character_1getBoosters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  std::shared_ptr< dgmpp::Character > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< dgmpp::Booster > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Character > **)&jarg1;
  arg1 = (dgmpp::Character *)(smartarg1 ? smartarg1->get() : 0); 
  result = dgmpp_Character_getBoosters(arg1);
  *(std::vector< std::shared_ptr< dgmpp::Booster > > **)&jresult = new std::vector< std::shared_ptr< dgmpp::Booster > >((const std::vector< std::shared_ptr< dgmpp::Booster > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Character_1setCharacterName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  char *arg2 = (char *) 0 ;
  std::shared_ptr< dgmpp::Character > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Character > **)&jarg1;
  arg1 = (dgmpp::Character *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setCharacterName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_dgmpp_dgmppJNI_Character_1getCharacterName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  std::shared_ptr< dgmpp::Character > *smartarg1 = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Character > **)&jarg1;
  arg1 = (dgmpp::Character *)(smartarg1 ? smartarg1->get() : 0); 
  result = (char *)(arg1)->getCharacterName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Character_1setSkillLevels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  std::map< dgmpp::TypeID,int > *arg2 = 0 ;
  std::shared_ptr< dgmpp::Character > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Character > **)&jarg1;
  arg1 = (dgmpp::Character *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::map< dgmpp::TypeID,int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< dgmpp::TypeID,int > const & reference is null");
    return ;
  } 
  (arg1)->setSkillLevels((std::map< dgmpp::TypeID,int > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Character_1setAllSkillsLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  int arg2 ;
  std::shared_ptr< dgmpp::Character > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Character > **)&jarg1;
  arg1 = (dgmpp::Character *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->setAllSkillsLevel(arg2);
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_Character_1getDroneControlDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  std::shared_ptr< dgmpp::Character > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Character > **)&jarg1;
  arg1 = (dgmpp::Character *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getDroneControlDistance();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1Character(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  std::shared_ptr< dgmpp::Character > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Character > **)&jarg1;
  arg1 = (dgmpp::Character *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Gang_1getPilots(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Gang *arg1 = (dgmpp::Gang *) 0 ;
  std::shared_ptr< dgmpp::Gang > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< dgmpp::Character > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Gang > **)&jarg1;
  arg1 = (dgmpp::Gang *)(smartarg1 ? smartarg1->get() : 0); 
  result = dgmpp_Gang_getPilots(arg1);
  *(std::vector< std::shared_ptr< dgmpp::Character > > **)&jresult = new std::vector< std::shared_ptr< dgmpp::Character > >((const std::vector< std::shared_ptr< dgmpp::Character > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Gang_1addPilot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Gang *arg1 = (dgmpp::Gang *) 0 ;
  std::shared_ptr< dgmpp::Gang > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Character > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Gang > **)&jarg1;
  arg1 = (dgmpp::Gang *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->addPilot();
  *(std::shared_ptr< dgmpp::Character > **)&jresult = result ? new std::shared_ptr< dgmpp::Character >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Gang_1removePilot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Gang *arg1 = (dgmpp::Gang *) 0 ;
  std::shared_ptr< dgmpp::Character > *arg2 = 0 ;
  std::shared_ptr< dgmpp::Gang > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Character > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Gang > **)&jarg1;
  arg1 = (dgmpp::Gang *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(std::shared_ptr< dgmpp::Character > **)&jarg2 : &tempnull2; 
  (arg1)->removePilot((std::shared_ptr< dgmpp::Character > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Gang_1getFleetBooster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Gang *arg1 = (dgmpp::Gang *) 0 ;
  std::shared_ptr< dgmpp::Gang > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Character > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Gang > **)&jarg1;
  arg1 = (dgmpp::Gang *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getFleetBooster();
  *(std::shared_ptr< dgmpp::Character > **)&jresult = result ? new std::shared_ptr< dgmpp::Character >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Gang_1getWingBooster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Gang *arg1 = (dgmpp::Gang *) 0 ;
  std::shared_ptr< dgmpp::Gang > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Character > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Gang > **)&jarg1;
  arg1 = (dgmpp::Gang *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getWingBooster();
  *(std::shared_ptr< dgmpp::Character > **)&jresult = result ? new std::shared_ptr< dgmpp::Character >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Gang_1getSquadBooster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Gang *arg1 = (dgmpp::Gang *) 0 ;
  std::shared_ptr< dgmpp::Gang > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Character > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Gang > **)&jarg1;
  arg1 = (dgmpp::Gang *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getSquadBooster();
  *(std::shared_ptr< dgmpp::Character > **)&jresult = result ? new std::shared_ptr< dgmpp::Character >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Gang_1setFleetBooster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Gang *arg1 = (dgmpp::Gang *) 0 ;
  std::shared_ptr< dgmpp::Character > *arg2 = 0 ;
  std::shared_ptr< dgmpp::Gang > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Character > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Gang > **)&jarg1;
  arg1 = (dgmpp::Gang *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(std::shared_ptr< dgmpp::Character > **)&jarg2 : &tempnull2; 
  (arg1)->setFleetBooster((std::shared_ptr< dgmpp::Character > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Gang_1setWingBooster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Gang *arg1 = (dgmpp::Gang *) 0 ;
  std::shared_ptr< dgmpp::Character > *arg2 = 0 ;
  std::shared_ptr< dgmpp::Gang > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Character > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Gang > **)&jarg1;
  arg1 = (dgmpp::Gang *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(std::shared_ptr< dgmpp::Character > **)&jarg2 : &tempnull2; 
  (arg1)->setWingBooster((std::shared_ptr< dgmpp::Character > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Gang_1setSquadBooster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Gang *arg1 = (dgmpp::Gang *) 0 ;
  std::shared_ptr< dgmpp::Character > *arg2 = 0 ;
  std::shared_ptr< dgmpp::Gang > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Character > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Gang > **)&jarg1;
  arg1 = (dgmpp::Gang *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(std::shared_ptr< dgmpp::Character > **)&jarg2 : &tempnull2; 
  (arg1)->setSquadBooster((std::shared_ptr< dgmpp::Character > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Gang_1removeFleetBooster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  dgmpp::Gang *arg1 = (dgmpp::Gang *) 0 ;
  std::shared_ptr< dgmpp::Gang > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Gang > **)&jarg1;
  arg1 = (dgmpp::Gang *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->removeFleetBooster();
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Gang_1removeWingBooster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  dgmpp::Gang *arg1 = (dgmpp::Gang *) 0 ;
  std::shared_ptr< dgmpp::Gang > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Gang > **)&jarg1;
  arg1 = (dgmpp::Gang *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->removeWingBooster();
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Gang_1removeSquadBooster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  dgmpp::Gang *arg1 = (dgmpp::Gang *) 0 ;
  std::shared_ptr< dgmpp::Gang > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Gang > **)&jarg1;
  arg1 = (dgmpp::Gang *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->removeSquadBooster();
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1Gang(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Gang *arg1 = (dgmpp::Gang *) 0 ;
  std::shared_ptr< dgmpp::Gang > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Gang > **)&jarg1;
  arg1 = (dgmpp::Gang *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1Area(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Area *arg1 = (dgmpp::Area *) 0 ;
  std::shared_ptr< dgmpp::Area > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Area > **)&jarg1;
  arg1 = (dgmpp::Area *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_StarbaseStructure_1getResistances(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::StarbaseStructure *arg1 = (dgmpp::StarbaseStructure *) 0 ;
  std::shared_ptr< dgmpp::StarbaseStructure > *smartarg1 = 0 ;
  dgmpp::Resistances *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::StarbaseStructure > **)&jarg1;
  arg1 = (dgmpp::StarbaseStructure *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::Resistances *) &(arg1)->getResistances();
  *(dgmpp::Resistances **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_StarbaseStructure_1getTank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::StarbaseStructure *arg1 = (dgmpp::StarbaseStructure *) 0 ;
  std::shared_ptr< dgmpp::StarbaseStructure > *smartarg1 = 0 ;
  dgmpp::Tank *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::StarbaseStructure > **)&jarg1;
  arg1 = (dgmpp::StarbaseStructure *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::Tank *) &(arg1)->getTank();
  *(dgmpp::Tank **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_StarbaseStructure_1getEffectiveTank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::StarbaseStructure *arg1 = (dgmpp::StarbaseStructure *) 0 ;
  std::shared_ptr< dgmpp::StarbaseStructure > *smartarg1 = 0 ;
  dgmpp::Tank *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::StarbaseStructure > **)&jarg1;
  arg1 = (dgmpp::StarbaseStructure *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::Tank *) &(arg1)->getEffectiveTank();
  *(dgmpp::Tank **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_StarbaseStructure_1getHitPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::StarbaseStructure *arg1 = (dgmpp::StarbaseStructure *) 0 ;
  std::shared_ptr< dgmpp::StarbaseStructure > *smartarg1 = 0 ;
  dgmpp::HitPoints *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::StarbaseStructure > **)&jarg1;
  arg1 = (dgmpp::StarbaseStructure *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::HitPoints *) &(arg1)->getHitPoints();
  *(dgmpp::HitPoints **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_StarbaseStructure_1getEffectiveHitPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::StarbaseStructure *arg1 = (dgmpp::StarbaseStructure *) 0 ;
  std::shared_ptr< dgmpp::StarbaseStructure > *smartarg1 = 0 ;
  dgmpp::HitPoints *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::StarbaseStructure > **)&jarg1;
  arg1 = (dgmpp::StarbaseStructure *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::HitPoints *) &(arg1)->getEffectiveHitPoints();
  *(dgmpp::HitPoints **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_StarbaseStructure_1getShieldRecharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::StarbaseStructure *arg1 = (dgmpp::StarbaseStructure *) 0 ;
  std::shared_ptr< dgmpp::StarbaseStructure > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::StarbaseStructure > **)&jarg1;
  arg1 = (dgmpp::StarbaseStructure *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getShieldRecharge();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1StarbaseStructure(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::StarbaseStructure *arg1 = (dgmpp::StarbaseStructure *) 0 ;
  std::shared_ptr< dgmpp::StarbaseStructure > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::StarbaseStructure > **)&jarg1;
  arg1 = (dgmpp::StarbaseStructure *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_ControlTower_1addStructure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::ControlTower *arg1 = (dgmpp::ControlTower *) 0 ;
  dgmpp::TypeID arg2 ;
  std::shared_ptr< dgmpp::ControlTower > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::StarbaseStructure > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::ControlTower > **)&jarg1;
  arg1 = (dgmpp::ControlTower *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (arg1)->addStructure(arg2);
  *(std::shared_ptr< dgmpp::StarbaseStructure > **)&jresult = result ? new std::shared_ptr< dgmpp::StarbaseStructure >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_ControlTower_1removeStructure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::ControlTower *arg1 = (dgmpp::ControlTower *) 0 ;
  std::shared_ptr< dgmpp::StarbaseStructure > *arg2 = 0 ;
  std::shared_ptr< dgmpp::ControlTower > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::StarbaseStructure > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::ControlTower > **)&jarg1;
  arg1 = (dgmpp::ControlTower *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(std::shared_ptr< dgmpp::StarbaseStructure > **)&jarg2 : &tempnull2; 
  (arg1)->removeStructure((std::shared_ptr< dgmpp::StarbaseStructure > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_ControlTower_1getStructures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::ControlTower *arg1 = (dgmpp::ControlTower *) 0 ;
  std::shared_ptr< dgmpp::ControlTower > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::ControlTower > **)&jarg1;
  arg1 = (dgmpp::ControlTower *)(smartarg1 ? smartarg1->get() : 0); 
  result = dgmpp_ControlTower_getStructures(arg1);
  *(std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > **)&jresult = new std::vector< std::shared_ptr< dgmpp::StarbaseStructure > >((const std::vector< std::shared_ptr< dgmpp::StarbaseStructure > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_ControlTower_1getDamagePattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::ControlTower *arg1 = (dgmpp::ControlTower *) 0 ;
  std::shared_ptr< dgmpp::ControlTower > *smartarg1 = 0 ;
  dgmpp::DamagePattern *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::ControlTower > **)&jarg1;
  arg1 = (dgmpp::ControlTower *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::DamagePattern *) &(arg1)->getDamagePattern();
  *(dgmpp::DamagePattern **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_ControlTower_1setDamagePattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::ControlTower *arg1 = (dgmpp::ControlTower *) 0 ;
  dgmpp::DamagePattern *arg2 = 0 ;
  std::shared_ptr< dgmpp::ControlTower > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::ControlTower > **)&jarg1;
  arg1 = (dgmpp::ControlTower *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(dgmpp::DamagePattern **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dgmpp::DamagePattern const & reference is null");
    return ;
  } 
  (arg1)->setDamagePattern((dgmpp::DamagePattern const &)*arg2);
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_ControlTower_1getPowerGridUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::ControlTower *arg1 = (dgmpp::ControlTower *) 0 ;
  std::shared_ptr< dgmpp::ControlTower > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::ControlTower > **)&jarg1;
  arg1 = (dgmpp::ControlTower *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getPowerGridUsed();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_ControlTower_1getTotalPowerGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::ControlTower *arg1 = (dgmpp::ControlTower *) 0 ;
  std::shared_ptr< dgmpp::ControlTower > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::ControlTower > **)&jarg1;
  arg1 = (dgmpp::ControlTower *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getTotalPowerGrid();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_ControlTower_1getCpuUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::ControlTower *arg1 = (dgmpp::ControlTower *) 0 ;
  std::shared_ptr< dgmpp::ControlTower > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::ControlTower > **)&jarg1;
  arg1 = (dgmpp::ControlTower *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getCpuUsed();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_ControlTower_1getTotalCpu(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::ControlTower *arg1 = (dgmpp::ControlTower *) 0 ;
  std::shared_ptr< dgmpp::ControlTower > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::ControlTower > **)&jarg1;
  arg1 = (dgmpp::ControlTower *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getTotalCpu();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_ControlTower_1getResistances(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::ControlTower *arg1 = (dgmpp::ControlTower *) 0 ;
  std::shared_ptr< dgmpp::ControlTower > *smartarg1 = 0 ;
  dgmpp::Resistances *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::ControlTower > **)&jarg1;
  arg1 = (dgmpp::ControlTower *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::Resistances *) &(arg1)->getResistances();
  *(dgmpp::Resistances **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_ControlTower_1getTank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::ControlTower *arg1 = (dgmpp::ControlTower *) 0 ;
  std::shared_ptr< dgmpp::ControlTower > *smartarg1 = 0 ;
  dgmpp::Tank *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::ControlTower > **)&jarg1;
  arg1 = (dgmpp::ControlTower *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::Tank *) &(arg1)->getTank();
  *(dgmpp::Tank **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_ControlTower_1getEffectiveTank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::ControlTower *arg1 = (dgmpp::ControlTower *) 0 ;
  std::shared_ptr< dgmpp::ControlTower > *smartarg1 = 0 ;
  dgmpp::Tank *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::ControlTower > **)&jarg1;
  arg1 = (dgmpp::ControlTower *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::Tank *) &(arg1)->getEffectiveTank();
  *(dgmpp::Tank **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_ControlTower_1getHitPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::ControlTower *arg1 = (dgmpp::ControlTower *) 0 ;
  std::shared_ptr< dgmpp::ControlTower > *smartarg1 = 0 ;
  dgmpp::HitPoints *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::ControlTower > **)&jarg1;
  arg1 = (dgmpp::ControlTower *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::HitPoints *) &(arg1)->getHitPoints();
  *(dgmpp::HitPoints **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_ControlTower_1getEffectiveHitPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::ControlTower *arg1 = (dgmpp::ControlTower *) 0 ;
  std::shared_ptr< dgmpp::ControlTower > *smartarg1 = 0 ;
  dgmpp::HitPoints *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::ControlTower > **)&jarg1;
  arg1 = (dgmpp::ControlTower *)(smartarg1 ? smartarg1->get() : 0); 
  result = (dgmpp::HitPoints *) &(arg1)->getEffectiveHitPoints();
  *(dgmpp::HitPoints **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_ControlTower_1getShieldRecharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::ControlTower *arg1 = (dgmpp::ControlTower *) 0 ;
  std::shared_ptr< dgmpp::ControlTower > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::ControlTower > **)&jarg1;
  arg1 = (dgmpp::ControlTower *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getShieldRecharge();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_ControlTower_1getWeaponDps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::ControlTower *arg1 = (dgmpp::ControlTower *) 0 ;
  std::shared_ptr< dgmpp::ControlTower > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::ControlTower > **)&jarg1;
  arg1 = (dgmpp::ControlTower *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getWeaponDps();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_dgmpp_dgmppJNI_ControlTower_1getWeaponVolley(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dgmpp::ControlTower *arg1 = (dgmpp::ControlTower *) 0 ;
  std::shared_ptr< dgmpp::ControlTower > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::ControlTower > **)&jarg1;
  arg1 = (dgmpp::ControlTower *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)(arg1)->getWeaponVolley();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1ControlTower(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::ControlTower *arg1 = (dgmpp::ControlTower *) 0 ;
  std::shared_ptr< dgmpp::ControlTower > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::ControlTower > **)&jarg1;
  arg1 = (dgmpp::ControlTower *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1Engine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< dgmpp::SqlConnector > *arg1 = 0 ;
  std::shared_ptr< dgmpp::SqlConnector > tempnull1 ;
  dgmpp::Engine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(std::shared_ptr< dgmpp::SqlConnector > **)&jarg1 : &tempnull1; 
  result = (dgmpp::Engine *)new dgmpp::Engine((std::shared_ptr< dgmpp::SqlConnector > const &)*arg1);
  
  *(std::shared_ptr<  dgmpp::Engine > **)&jresult = result ? new std::shared_ptr<  dgmpp::Engine >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1Engine(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Engine *arg1 = (dgmpp::Engine *) 0 ;
  std::shared_ptr< dgmpp::Engine > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Engine > **)&jarg1;
  arg1 = (dgmpp::Engine *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Engine_1setArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Engine *arg1 = (dgmpp::Engine *) 0 ;
  dgmpp::TypeID arg2 ;
  std::shared_ptr< dgmpp::Engine > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Area > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Engine > **)&jarg1;
  arg1 = (dgmpp::Engine *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (arg1)->setArea(arg2);
  *(std::shared_ptr< dgmpp::Area > **)&jresult = result ? new std::shared_ptr< dgmpp::Area >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Engine_1setControlTower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Engine *arg1 = (dgmpp::Engine *) 0 ;
  dgmpp::TypeID arg2 ;
  std::shared_ptr< dgmpp::Engine > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::ControlTower > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Engine > **)&jarg1;
  arg1 = (dgmpp::Engine *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (arg1)->setControlTower(arg2);
  *(std::shared_ptr< dgmpp::ControlTower > **)&jresult = result ? new std::shared_ptr< dgmpp::ControlTower >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_Engine_1clearArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  dgmpp::Engine *arg1 = (dgmpp::Engine *) 0 ;
  std::shared_ptr< dgmpp::Engine > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Engine > **)&jarg1;
  arg1 = (dgmpp::Engine *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clearArea();
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Engine_1getGang(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Engine *arg1 = (dgmpp::Engine *) 0 ;
  std::shared_ptr< dgmpp::Engine > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Gang > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Engine > **)&jarg1;
  arg1 = (dgmpp::Engine *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getGang();
  *(std::shared_ptr< dgmpp::Gang > **)&jresult = result ? new std::shared_ptr< dgmpp::Gang >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Engine_1getArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Engine *arg1 = (dgmpp::Engine *) 0 ;
  std::shared_ptr< dgmpp::Engine > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::Area > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Engine > **)&jarg1;
  arg1 = (dgmpp::Engine *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getArea();
  *(std::shared_ptr< dgmpp::Area > **)&jresult = result ? new std::shared_ptr< dgmpp::Area >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Engine_1getControlTower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Engine *arg1 = (dgmpp::Engine *) 0 ;
  std::shared_ptr< dgmpp::Engine > *smartarg1 = 0 ;
  std::shared_ptr< dgmpp::ControlTower > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Engine > **)&jarg1;
  arg1 = (dgmpp::Engine *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getControlTower();
  *(std::shared_ptr< dgmpp::ControlTower > **)&jresult = result ? new std::shared_ptr< dgmpp::ControlTower >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1Cargo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Cargo *arg1 = (dgmpp::Cargo *) 0 ;
  std::shared_ptr< dgmpp::Cargo > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::Cargo > **)&jarg1;
  arg1 = (dgmpp::Cargo *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_new_1SqliteConnector(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  dgmpp::SqliteConnector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (dgmpp::SqliteConnector *)new dgmpp::SqliteConnector((char const *)arg1);
  
  *(std::shared_ptr<  dgmpp::SqliteConnector > **)&jresult = result ? new std::shared_ptr<  dgmpp::SqliteConnector >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_dgmpp_dgmppJNI_delete_1SqliteConnector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::SqliteConnector *arg1 = (dgmpp::SqliteConnector *) 0 ;
  std::shared_ptr< dgmpp::SqliteConnector > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  dgmpp::SqliteConnector > **)&jarg1;
  arg1 = (dgmpp::SqliteConnector *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Booster_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< dgmpp::Booster > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< dgmpp::Booster > **)&jarg1;
    *(std::shared_ptr< dgmpp::Item > **)&baseptr = argp1 ? new std::shared_ptr< dgmpp::Item >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Implant_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< dgmpp::Implant > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< dgmpp::Implant > **)&jarg1;
    *(std::shared_ptr< dgmpp::Item > **)&baseptr = argp1 ? new std::shared_ptr< dgmpp::Item >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Skill_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< dgmpp::Skill > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< dgmpp::Skill > **)&jarg1;
    *(std::shared_ptr< dgmpp::Item > **)&baseptr = argp1 ? new std::shared_ptr< dgmpp::Item >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_DamagePattern_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(dgmpp::DamageVector **)&baseptr = *(dgmpp::DamagePattern **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Charge_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< dgmpp::Charge > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< dgmpp::Charge > **)&jarg1;
    *(std::shared_ptr< dgmpp::Item > **)&baseptr = argp1 ? new std::shared_ptr< dgmpp::Item >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Module_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< dgmpp::Module > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< dgmpp::Module > **)&jarg1;
    *(std::shared_ptr< dgmpp::Item > **)&baseptr = argp1 ? new std::shared_ptr< dgmpp::Item >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Drone_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< dgmpp::Drone > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< dgmpp::Drone > **)&jarg1;
    *(std::shared_ptr< dgmpp::Item > **)&baseptr = argp1 ? new std::shared_ptr< dgmpp::Item >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Ship_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< dgmpp::Ship > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< dgmpp::Ship > **)&jarg1;
    *(std::shared_ptr< dgmpp::Item > **)&baseptr = argp1 ? new std::shared_ptr< dgmpp::Item >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Character_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< dgmpp::Character > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< dgmpp::Character > **)&jarg1;
    *(std::shared_ptr< dgmpp::Item > **)&baseptr = argp1 ? new std::shared_ptr< dgmpp::Item >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Gang_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< dgmpp::Gang > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< dgmpp::Gang > **)&jarg1;
    *(std::shared_ptr< dgmpp::Item > **)&baseptr = argp1 ? new std::shared_ptr< dgmpp::Item >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_Area_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< dgmpp::Area > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< dgmpp::Area > **)&jarg1;
    *(std::shared_ptr< dgmpp::Item > **)&baseptr = argp1 ? new std::shared_ptr< dgmpp::Item >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_StarbaseStructure_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< dgmpp::StarbaseStructure > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< dgmpp::StarbaseStructure > **)&jarg1;
    *(std::shared_ptr< dgmpp::Module > **)&baseptr = argp1 ? new std::shared_ptr< dgmpp::Module >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_ControlTower_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< dgmpp::ControlTower > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< dgmpp::ControlTower > **)&jarg1;
    *(std::shared_ptr< dgmpp::Item > **)&baseptr = argp1 ? new std::shared_ptr< dgmpp::Item >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_dgmpp_dgmppJNI_SqliteConnector_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< dgmpp::SqliteConnector > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< dgmpp::SqliteConnector > **)&jarg1;
    *(std::shared_ptr< dgmpp::SqlConnector > **)&baseptr = argp1 ? new std::shared_ptr< dgmpp::SqlConnector >(*argp1) : 0;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

