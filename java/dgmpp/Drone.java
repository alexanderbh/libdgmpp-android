/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package dgmpp;

public class Drone extends Item {
  private transient long swigCPtr;
  private boolean swigCMemOwnDerived;

  protected Drone(long cPtr, boolean cMemoryOwn) {
    super(dgmppJNI.Drone_SWIGSmartPtrUpcast(cPtr), true);
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Drone obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwnDerived) {
        swigCMemOwnDerived = false;
        dgmppJNI.delete_Drone(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public void setTarget(Ship target) {
    dgmppJNI.Drone_setTarget__SWIG_0(swigCPtr, this, Ship.getCPtr(target), target);
  }

  public void setTarget() {
    dgmppJNI.Drone_setTarget__SWIG_1(swigCPtr, this);
  }

  public void clearTarget() {
    dgmppJNI.Drone_clearTarget(swigCPtr, this);
  }

  public Ship getTarget() {
    long cPtr = dgmppJNI.Drone_getTarget(swigCPtr, this);
    return (cPtr == 0) ? null : new Ship(cPtr, true);
  }

  public boolean dealsDamage() {
    return dgmppJNI.Drone_dealsDamage(swigCPtr, this);
  }

  public Charge getCharge() {
    long cPtr = dgmppJNI.Drone_getCharge(swigCPtr, this);
    return (cPtr == 0) ? null : new Charge(cPtr, true);
  }

  public void setActive(boolean active) {
    dgmppJNI.Drone_setActive(swigCPtr, this, active);
  }

  public boolean isActive() {
    return dgmppJNI.Drone_isActive(swigCPtr, this);
  }

  public boolean isAssistance() {
    return dgmppJNI.Drone_isAssistance(swigCPtr, this);
  }

  public boolean isOffensive() {
    return dgmppJNI.Drone_isOffensive(swigCPtr, this);
  }

  public Drone.FighterSquadron getSquadron() {
    return Drone.FighterSquadron.swigToEnum(dgmppJNI.Drone_getSquadron(swigCPtr, this));
  }

  public int getSquadronSize() {
    return dgmppJNI.Drone_getSquadronSize(swigCPtr, this);
  }

  public float getCycleTime() {
    return dgmppJNI.Drone_getCycleTime(swigCPtr, this);
  }

  public DamageVector getVolley() {
    return new DamageVector(dgmppJNI.Drone_getVolley(swigCPtr, this), true);
  }

  public DamageVector getDps() {
    return new DamageVector(dgmppJNI.Drone_getDps(swigCPtr, this), true);
  }

  public float getMaxRange() {
    return dgmppJNI.Drone_getMaxRange(swigCPtr, this);
  }

  public float getFalloff() {
    return dgmppJNI.Drone_getFalloff(swigCPtr, this);
  }

  public float getAccuracyScore() {
    return dgmppJNI.Drone_getAccuracyScore(swigCPtr, this);
  }

  public float getMiningYield() {
    return dgmppJNI.Drone_getMiningYield(swigCPtr, this);
  }

  public float getVelocity() {
    return dgmppJNI.Drone_getVelocity(swigCPtr, this);
  }

  public final static class FighterSquadron {
    public final static Drone.FighterSquadron FIGHTER_SQUADRON_NONE = new Drone.FighterSquadron("FIGHTER_SQUADRON_NONE", dgmppJNI.Drone_FIGHTER_SQUADRON_NONE_get());
    public final static Drone.FighterSquadron FIGHTER_SQUADRON_HEAVY = new Drone.FighterSquadron("FIGHTER_SQUADRON_HEAVY");
    public final static Drone.FighterSquadron FIGHTER_SQUADRON_LIGHT = new Drone.FighterSquadron("FIGHTER_SQUADRON_LIGHT");
    public final static Drone.FighterSquadron FIGHTER_SQUADRON_SUPPORT = new Drone.FighterSquadron("FIGHTER_SQUADRON_SUPPORT");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static FighterSquadron swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + FighterSquadron.class + " with value " + swigValue);
    }

    private FighterSquadron(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private FighterSquadron(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private FighterSquadron(String swigName, FighterSquadron swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static FighterSquadron[] swigValues = { FIGHTER_SQUADRON_NONE, FIGHTER_SQUADRON_HEAVY, FIGHTER_SQUADRON_LIGHT, FIGHTER_SQUADRON_SUPPORT };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
