/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package dgmpp;

public class Effect {
  private transient long swigCPtr;
  private transient boolean swigCMemOwn;

  protected Effect(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Effect obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        dgmppJNI.delete_Effect(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public int getEffectID() {
    return dgmppJNI.Effect_getEffectID(swigCPtr, this);
  }

  public Effect.Category getCategory() {
    return Effect.Category.swigToEnum(dgmppJNI.Effect_getCategory(swigCPtr, this));
  }

  public String getEffectName() {
    return dgmppJNI.Effect_getEffectName(swigCPtr, this);
  }

  public final static class Category {
    public final static Effect.Category CATEGORY_GENERIC = new Effect.Category("CATEGORY_GENERIC", dgmppJNI.Effect_CATEGORY_GENERIC_get());
    public final static Effect.Category CATEGORY_ACTIVE = new Effect.Category("CATEGORY_ACTIVE", dgmppJNI.Effect_CATEGORY_ACTIVE_get());
    public final static Effect.Category CATEGORY_TARGET = new Effect.Category("CATEGORY_TARGET", dgmppJNI.Effect_CATEGORY_TARGET_get());
    public final static Effect.Category CATEGORY_PASSIVE = new Effect.Category("CATEGORY_PASSIVE", dgmppJNI.Effect_CATEGORY_PASSIVE_get());
    public final static Effect.Category CATEGORY_OVERLOADED = new Effect.Category("CATEGORY_OVERLOADED", dgmppJNI.Effect_CATEGORY_OVERLOADED_get());
    public final static Effect.Category CATEGORY_DUNGEON = new Effect.Category("CATEGORY_DUNGEON", dgmppJNI.Effect_CATEGORY_DUNGEON_get());
    public final static Effect.Category CATEGORY_SYSTEM = new Effect.Category("CATEGORY_SYSTEM", dgmppJNI.Effect_CATEGORY_SYSTEM_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Category swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Category.class + " with value " + swigValue);
    }

    private Category(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Category(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Category(String swigName, Category swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Category[] swigValues = { CATEGORY_GENERIC, CATEGORY_ACTIVE, CATEGORY_TARGET, CATEGORY_PASSIVE, CATEGORY_OVERLOADED, CATEGORY_DUNGEON, CATEGORY_SYSTEM };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
